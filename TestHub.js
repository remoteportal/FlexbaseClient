// Generated by CoffeeScript 2.3.0
var API, Base, ClientFB, O, ServerFB, TestEnv, TestHub, trace, util;

API = require('./API');

Base = require('./Base');

ClientFB = require('./ClientFB');

O = require('./O');

ServerFB = require('./ServerFB');

trace = require('./trace');

util = require('./Util');

TestEnv = class TestEnv extends Base {
  destroy() {
    return new Promise((resolve, reject) => {
      this.log("destroy");
      this.server.listen(false);
      return resolve();
    });
  }

  infoFN() {
    return `TestEnv: serverPort=${this.server.port}`;
  }

};

TestHub = (function() {
  class TestHub extends Base {
    constructor(c1) {
      super("TestHub");
      this.c = c1;
      this.port = 3370; //H #HARDCODE
    }

    //		O.LOG @c

    //RV: fbc.user
    clientFBCCreateUserRandomRegister() {
      return new Promise((resolve, reject) => {
        var fbc;
        fbc = new ClientFB(this.c, this.c.directory);
        fbc.start(this.c.URL); //H: eliminate?
        return fbc.get(this.objectIDLookup(this.FLEXBASE_AUTH)).then((auth) => { //H: catch-22?  it's not local yet so how get???
          fbc.auth = auth;
          return userRandomRegister(auth);
        }).then((user) => {
          fbc.user = user;
          return resolve(fbc);
        }).catch((ex) => {
          return reject(ex);
        });
      });
    }

    clientFBCUserLogon(username, password) {
      return new Promise((resolve, reject) => {
        var fbc;
        fbc = new ClientFB(this.c, this.c.directory);
        fbc.start(this.c.URL);
        return fbc.get(this.objectIDLookup(this.FLEXBASE_AUTH)).then((auth) => {
          fbc.auth = auth;
          return fbc.logon(username, password);
        }).then((user) => {
          fbc.user = user;
          return resolve(fbc);
        }).catch((ex) => {
          return reject(ex);
        });
      });
    }

    emailRandom() {
      return `test${util.random(1000, 9999)}@test.com`;
    }

    fnameRandom() {
      return util.randomPick("fname", "Peter,Deanna,Desirina,Morgan,Deanelle,Dustin,Lauren,Dean,Ashley,Derrick,Parker,Daebrionne");
    }

    infoFN() {
      return `TestHub: port=${this.port}`;
    }

    lnameRandom() {
      return util.randomPick("lname", "Alvin,Boksovich,Pearce");
    }

    passwordRandom() {
      return util.random(1000, 9999);
    }

    portNext() {
      return this.port++;
    }

    resetSync() {
      return util.fs_directoryDeleteRecursive("/tmp/ut");
    }

    serverFresh() {
      return new Promise((resolve, reject) => {
        var testEnv;
        //			@log "serverFresh"
        testEnv = new TestEnv();
        //TODO #REFACTOR: move all this into TestEnv?
        return this.tablesCreate().then(() => {
          var _Server;
          this.log("tables created");
          testEnv.port = this.portNext();
          testEnv.clientDirectory = `${this.c.directory}/c_${testEnv.port}`;
          testEnv.serverDirectory = `${this.c.directory}/s_${testEnv.port}`;
          _Server = class _Server extends ServerFB {
            onReceiveSync(mgr, po) {
              //					@log "onReceive", po
              return mgr.reply({
                answer: "rain"
              });
            }

          };
          testEnv.server = new _Server(testEnv.port, testEnv.serverDirectory);
          return testEnv.server.listen(true);
        }).then(() => {
          //				@log "all set!"
          return resolve(testEnv);
        }).catch((ex) => {
          this.logCatch("serverFresh", ex);
          return reject();
        });
      });
    }

    startClient(directory) {
      return new Promise((resolve, reject) => {
        //			@log "startClient: #{spaceName}"														if trace.TESTHUB or trace.CONSTRUCTORS
        this.c.PORT_WEB_SOCKET = this.c.PROD ? 3355 : 3366;
        if (this.c.CLOUD) {
          this.c.URL = `ws://www.skillsplanet.com:${this.c.PORT_WEB_SOCKET}`;
        } else {
          this.c.URL = `ws://localhost:${this.c.PORT_WEB_SOCKET}`;
        }
        //H #WRONG: the testHub.start should NOT create a client... I think
        //			#TODO: @client = new ClientFB @c, directory
        return resolve(this.client);
      });
    }

    tablesCreate() {
      return new Promise((resolve, reject) => {
        /*
        create database ut;

        use ut;

        create user ut@localhost

        GRANT CREATE ROUTINE,ALTER ROUTINE,ALTER,CREATE,DROP,INSERT,EXECUTE,SELECT,UPDATE ON ut.* TO 'ut'@'localhost';
        flush privileges;

        CREATE ROUTINE --for--> create procedure
        ALTER ROUTINE --for--> drop procedure
        */
        var c;
        c = API.apiFactory();
        return c.query("use ut;").then((rsets) => {
          //				@log "query", rsets, true
          return c.query("DROP TABLE IF EXISTS `object`;\n\nCREATE TABLE `object` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `dateInserted` timestamp NOT NULL DEFAULT current_timestamp(),\n  `dateUpdated` timestamp NOT NULL DEFAULT current_timestamp(),\n  `parentID` int(11) unsigned NOT NULL,\n  `ownerID` int(11) unsigned NOT NULL DEFAULT 1,\n  `isPublic` bit(1) NOT NULL DEFAULT b'0',\n  `data` text NOT NULL,\n  `name` varchar(50) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `parentID__object_objectID` (`parentID`),\n  KEY `ownerID__userInfo_userInfoID` (`ownerID`)\n) ENGINE=InnoDB AUTO_INCREMENT=225 DEFAULT CHARSET=utf8 COMMENT='the object repository';");
        }).then((rsets) => {
          //				@log "query", rsets, true
          return c.query("drop procedure if exists objectInsert;\n\nCREATE PROCEDURE `objectInsert`(IN `ownerID` INT, IN `parentID` INT, IN `name` VARCHAR(50), IN `data` TEXT)\n    MODIFIES SQL DATA\nBEGIN\n	insert into object (`ownerID`, `parentID`, `name`, `data`) values (ownerID, 333, name, data);\n	select LAST_INSERT_ID() as id;\nEND");
        }).then((rsets) => {
          //				@log "query", rsets, true
          return c.query("call objectInsert(0,0,'fred','data4');");
        }).then((rsets) => {
          //				@log "query", rsets, true
          return c.query("drop procedure if exists objectDataUpdate;\n\nCREATE PROCEDURE `objectDataUpdate`(IN `_id` INT, IN `data2` TEXT)\n    MODIFIES SQL DATA\nBEGIN\nupdate object set `data`=data2,dateUpdated=current_timestamp() where id=_id;\nEND");
        }).then((rsets) => {
          //				@log "query", rsets, true
          return c.query("DROP TABLE IF EXISTS `userInfo`;\n\nCREATE TABLE `userInfo` (\n`userInfoID` int(11) unsigned NOT NULL AUTO_INCREMENT,\n`email` varchar(128) DEFAULT NULL,\n`password` varchar(64) DEFAULT NULL,\n`nameFirst` varchar(64) DEFAULT NULL,\n`nameLast` varchar(64) DEFAULT NULL,\n`identityVerificationID` int(11) unsigned DEFAULT NULL,\n`userState` tinyint(4) unsigned NOT NULL DEFAULT 1,\n`points` mediumint(9) unsigned NOT NULL DEFAULT 50,\n`inserted` timestamp NOT NULL DEFAULT current_timestamp(),\nPRIMARY KEY (`userInfoID`),\nUNIQUE KEY `ux_email` (`email`)\n) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;");
        }).then((rsets) => {
          //				@log "query", rsets, true
          return c.query("DROP TABLE IF EXISTS `emailHold`;\n\nCREATE TABLE `emailHold` (\n  `emailHoldID` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `enabled` tinyint(1) DEFAULT 1,\n  `email` varchar(128) DEFAULT NULL,\n  `inserted` timestamp NOT NULL DEFAULT current_timestamp(),\n  PRIMARY KEY (`emailHoldID`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
        }).then((rsets) => {
          //				@log "query", rsets, true
          return c.query("drop procedure if exists emailHold;\n\nCREATE PROCEDURE `emailHold`(IN _email varchar(128))\nBEGIN\n\ndeclare _userInfoID int(11) unsigned;\ndeclare _emailHoldID int(11) unsigned;\n\nset _email = trim(_email);\n\nupdate emailHold set enabled=0 where inserted < (NOW() - INTERVAL 3 MINUTE);\n\nselect userInfoID into _userInfoID from userInfo where email=_email;\nif _userInfoID is null then\n  select emailHoldID into _emailHoldID from emailHold  where email=_email and enabled=1 LIMIT 1;\n  if _emailHoldID is not null then\n    select 0 as emailHoldID;\n  else\n    insert into emailHold (email) values (_email);\n    SELECT LAST_INSERT_ID() as emailHoldID;\n  end if;\nelse\n  select -_userInfoID as emailHoldID;\nend if;\n\nEND");
        //			.then (rsets) =>
        //				@log "query", rsets, true
        //				c.query """
        //"""
        //			.then (rsets) =>
        //				@log "query", rsets, true
        //				c.query """
        //"""
        }).then((rsets) => {
          //				@log "query", rsets, true
          c.d();
          //				@log "DONE"
          return resolve();
        }).catch((ex) => {
          this.logFatal("query chain", "ex=" + ex);
          c.d();
          return reject(err);
        });
      });
    }

    URLGet() {
      return this.c.URL;
    }

    usernameRandom() {
      return util.randomPick("username", "remoteportal");
    }

    userRandomRegister(auth) {
      return auth.register(this.usernameRandom(), this.passwordRandom(), this.emailRandom(), this.fnameRandom, this.lnameRandom());
    }

  };

  TestHub.prototype.info = "TestHub info";

  return TestHub;

}).call(this);

module.exports = TestHub;
