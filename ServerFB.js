// Generated by CoffeeScript 2.3.0
/*
DESCRIPTION
- promise syncrhronized object delivery between client and server
- guaranteed delivery of objects each way?

TODO
*/
var A, API, Base, Client, ClientFB, FN, FNon, FO, Flexbase, Mgr, N, O, ST_EMAIL, ST_TEXT, Server, ServerFB, ServerFBUT, Store, T_API, T_CMS, URL, UT, after, app, app2, aws, beg, bodyParser, bulkForm, clientMap, contextFactory, cookieParser, down, end, expressWs, form, h, hhh, http, http2, indent, linkType, logBase, msgInsert, multer, multerS3, nbr, nodemailer, pair, pathWrite, peter, plus, port, proxyMap, qqq, raw, recentsBuild, recentsWrite, reqCounter, rnd, sendCounter, server, skillSelectAllEditor, skillTags, sql, stripHTTP, throttle, tipsWrite, top, trace, twilio, upload, util, wsMap;

A = require('./A');

API = require('./API');

Base = require('./Base');

ClientFB = require('./ClientFB');

O = require('./O');

Server = require('./Server');

Store = require('./Store');

trace = require('./trace');

UT = require('./UT');

util = require('./Util');

//ifdef ut
ServerFBUT = class ServerFBUT extends UT {
  run() {
    return this._A("register", {
      timeout: 3000
    }, function(ut) {
      return this.log("hello");
    });
  }

};

//			@testHub.startServer()

//			@testHub.clientFBCCreateUserRandomRegister()

//			client = null	# establish scope

//			port = @testHub.portNext()

//			cleanUp = =>
//				server.listen false
//				client.listen false

//			class _Server extends ServerFB
//				onReceiveSync: (mgr, po) ->
//#					@log "onReceive", po
//					mgr.reply answer:"rain"

//			class _Client extends ClientFB

//			server = new _Server port, "#{@testHub.c.directory}/ServerSyncUT_server"
//			server.listen true
//			.then =>
//				@log "create client and connect"
//				client = new _Client "ws://localhost:#{port}", "#{@testHub.c.directory}/ServerSyncUT_client"
//				client.listen true
//				.then =>
//					@log "client connected"
//					client.sendSync question:"what is the forecast?"
//				.then (po) =>
//					@log "sendSync completed", po
//					rvo = po.rvo
//					@log "rvo", rvo
//					@eq rvo.answer, "rain"
//					cleanUp()
//					ut.resolve()
//				.catch (ex) =>
//					@logCatch "server.listen.then.client.listen chain", ex
//					cleanUp()
//					ut.reject ex
//			.catch (ex) =>
//				@logCatch "server.listen", ex
//				ut.reject ex
//endif
Mgr = class Mgr extends Base {
  constructor(ws1) {
    super();
    this.ws = ws1;
  }

  reply(o) {
    this.log("reply");
    return this.ws.send(JSON.stringify({
      wrapper: true,
      rvo: o
    }));
  }

};

module.exports = ServerFB = class ServerFB extends Server {
  constructor(port1, directory) {
    var FBShared, pn, pv;
    super();
    this.port = port1;
    this.directory = directory;
    this.log(`ServerFB: port=${this.port} directory=${this.directory}`);
    this.store = Store.factory(this.directory);
    FBShared = require('./FBShared');
    for (pn in FBShared) {
      pv = FBShared[pn];
      //			@log "ServerFB", pn
      this[pn] = pv;
    }
    return;
  }

  //H: semantically this is messed up: returning a Promise only if bAlive=true
  listen(bAlive) {
    //		@log "listen: bAlive=#{bAlive}"
    super.listen(bAlive);
    if (bAlive) {
      //			new Promise (resolve, reject) =>
      //				@store.init()
      //				resolve "peter"
      return this.store.init();
    }
  }

  onReceive(ws, o) {
    var mgr, po;
    this.log("onReceive [DEFAULT]", o);
    this.store.write("test", {
      a: "first"
    });
    po = o;
    mgr = new Mgr(ws);
    return this.onReceiveSync(mgr, po);
  }

  //	send: (ws, o) ->
  //		@store.write "test", a:"first"
  //		@log "send", o

  //if ut
  static s_ut() {
    //		console.log "server hi"
    return new ServerFBUT().run();
  }

};

return;

//endif

//#####################################
wsMap = Object.create(null);

peter = 0;

setInterval((function() {
  var ex, pn, results, ws;
//	lg "hello"
  results = [];
  for (pn in wsMap) {
    ws = wsMap[pn];
    //		lg "MAP: user=#{pn}"

    //		ws.send JSON.stringify
    //			target: "flexbase"
    //			cmd: "wisper"
    if (FO) {
      FO.peter = peter++;
      try {
        //			lg "MAP: user=#{pn} FO.peter=#{FO.peter}"
        results.push(ws.send(JSON.stringify({
          target: "flexbase",
          cmd: "s-fb-object-push",
          fo: FO
        })));
      } catch (error) {
        ex = error;
        results.push(logcatch("test push", ex));
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
}), 30000);

FO = null;

logBase = function(s, o) {
  return LG(FILE, s, o);
};

proxyMap = {}; //NOT ACCURATE

Flexbase = function(ws) {
  return {
    log: (s, o) => {
      return logBase("Flexbase", s, o);
    },
    logError: (s, o) => {
      return logBase("Flexbase", `ERROR: ${s}`, o);
    },
    logCatch: (s, o) => {
      return logBase("Flexbase", `CATCH: ${s}`, o);
    },
    create: function(o, bSend) {
      return new Promise((resolve, reject) => {
        var c;
        if (!o.__cn) {
          reject("__cn not set");
        }
        if (o.dateCreated == null) {
          o.dateCreated = new Date(); // VERIFY in dump... it's getting corrupted?  it's some other object
        }
        c = apiFactory();
        return c.conn.query("call objectInsert(?,?,?,?)", [1, 1, "ws", JSON.stringify(o)], (err, rsets) => {
          if (err) {
            this.logCatch("create", err);
            return reject(err);
          } else {
            o.__id = parseInt(rsets[0][0].id, 10);
            proxyMap[o.__id] = o;
            //					@log "create #{JSON.stringify(o)}"
            if (bSend) {
              ws.send(JSON.stringify({
                target: "flexbase",
                cmd: "c-fb-object-insert-ack",
                fo: o
              }));
            }
            c.d();
            return resolve(o);
          }
        });
      });
    },
    get: function(__id) {
      return new Promise((resolve, reject) => {
        var _;
        if (_ = proxyMap[__id]) {
          //				@log "get #{__id} **** HIT ****"
          return resolve(_);
        } else {
          this.log(`get ${__id}`);
          throw "NOT-IMPL";
        }
      });
    }
  };
};

// CRWCCC...  create read write create create create....
app = require('express')();

//NEW
expressWs = require('express-ws')(app);

Client = require('mariasql');

bodyParser = require('body-parser');

app.use(bodyParser.json()); // support json encoded bodies

app.use(bodyParser.urlencoded({
  extended: true // support encoded bodies
}));

cookieParser = require('cookie-parser');

app.use(cookieParser());

nodemailer = require("nodemailer");

twilio = require("twilio");

app2 = require('express')();

http2 = require('http').Server(app2);

app2.get('/', function(req, res) {
  // res.send '<h1>Hello world</h1>'
  return res.sendFile(__dirname + '/chat.html');
});

server = app.listen(PORT_CMS, function() {
  console.log("===================================================================");
  return console.log(`SkillsPlanet API and CMS ${BUILD} running on port ${PORT_CMS} (chat ${PORT_WEB_SOCKET})`);
});

clientMap = {};

msgInsert = function(userInfoFromID, userInfoToID, msg) {
  var c;
  c = contextFactory(null, null, 1, "msgInsert");
  return c.conn.query('call msgInsert(?,?,?)', [userInfoFromID, userInfoToID, msg], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      lg("msgInsert success");
      return c.d();
    }
  });
};

rnd = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

// mType
T_API = 0;

T_CMS = 1;

reqCounter = [0, 0];

// mSendType
ST_EMAIL = 0;

ST_TEXT = 1;

sendCounter = [0, 0];

qqq = {};

setInterval((() => {
  //	lg "reset sendCounters"
  return sendCounter[0] = sendCounter[1] = 0;
}), 60 * 60000);

throttle = function(mSendType, thunk) {
  sendCounter[mSendType]++;
  if (sendCounter[mSendType] < 3) {
    return true;
  } else {
    logError(`sendCounter[${mSendType}]`);
    return false;
  }
};

sql = {
  Fsql: function() {
    return new Client({
      host: '127.0.0.1',
      user: 'SkillsUser',
      password: '0728',
      db: 'sp'
    });
  }
};

top = "";

contextFactory = function(req, res, mType, verb, userInfoID, nameFirst, bLog = true) {
  var date, flash, pins, ref;
  reqCounter[mType]++;
  flash = "";
  date = new Date();
  if (verb !== "q_pop" && bLog) {
    console.log(`${NN(date.getMinutes())}:${NN(date.getSeconds())} ${(mType ? "cms" : "api")} #${reqCounter[mType]} ${verb}`);
  }
  if (userInfoID == null) {
    userInfoID = 0;
  }
  if (nameFirst == null) {
    nameFirst = "WHO ARE YOU?";
  }
  if (req) {
    if (req.cookies.userInfoID) { // hit or miss
      // console.log "found cookie"
      userInfoID = 1 * req.cookies.userInfoID;
      nameFirst = req.cookies.nameFirst;
    }
    // console.log "FOUND COOKIES: userInfoID=#{userInfoID} #{nameFirst}"
    if ((ref = req.body) != null ? ref.userInfoID : void 0) { // hit or miss
      userInfoID = 1 * req.body.userInfoID;
    }
    // console.log "FOUND POST BODY: userInfoID=#{userInfoID}"
    pins = [];
    if (req.cookies.pinned) {
      pins = JSON.parse(req.cookies.pinned);
    }
  }
  top = `<!--\n<div class="main">\n    <div class="a"><a href="#">Home</a></div>\n    <div class="c"><a href="#">Contact</a></div>\n</div>\n<hr>\n-->\n\n\n<div class='mastbar'>\n<span class='maintitle'>SkillsPlanet CMS</span>\n<span class="mainmenu">\n<!--<a href='/cms'>HOME</a>-->\n<a href='/indent' title='show skills like a Gantt chart'>INDENT</a>\n<a href='/h' title='show skills parent to children'>HIER</a>\n<a href='/chk' title='integrity check'>CHK</a>\n<a href='/raw' title='show skills in table as added'>RAW</a>\n<a href='/addform' title='add new skill'>ADD</a>\n</span>\n&nbsp;&nbsp;&nbsp;&nbsp;\n\n<span class="dbmenu">\n<a href='/a' title='aim (intention for skill)'>a</a>\n<a href='/at' title='auditTrail'>at</a>\n<a href='/att' title='auditTrailType'>att</a>\n<a href='/eh' title='emailHold'>eh</a>\n<a href='/f' title='facet'>f</a>\n<a href='/r' title='reward'>r</a>\n<a href='/rt' title='rewardTrail'>rt</a>\n<a href='/rk' title='rewardKey'>rk</a>\n<a href='/rkt' title='rewardKeyTrail'>rkt</a>\n<a href='/s' title='skill'>s</a>\n<a href='/sl' title='skillLevel'>sl</a>\n<a href='/st' title='skillTrail'>st</a>\n\n<a href='/stag' title='skillTag'>sTAG</a>\n<a href='/staga' title='skillTagArea'>sTAGa</a>\n<a href='/s2stag' title='skill2skillTag'>s2sTAG</a>\n\n<a href='/stt' title='skillTrailType'>stt</a>\n<a href='/t' title='trivial'>t</a>\n<a href='/ui' title='userInfo'>ui</a>\n<a href='/ui2p' title='userInfo2password'>ui2p</a>\n<a href='/ui2s' title='userInfo2skill'>ui2s</a>\n<a href='/us' title='userState'>us</a>\n</span>\n&nbsp;&nbsp;&nbsp;&nbsp;\n\n<span class='name'>${nameFirst}</span>\n\n<span class="mainmenu">\n<a href='/logoff'>log off</a>\n</span>\n\n<span class='filterForm'><form action='/raw'><input type='text' name='term' placeholder='filter'><input type='submit' value='Filter'></form></span>\n</div>`;
  return Object.defineProperties({}, {
    _conn: {
      value: null,
      writable: true
    },
    audit: {
      enumerable: true,
      value: function(auditTrailTypeID, data) {
        this.log(`AUDIT[${auditTrailTypeID}] API#${reqCounter[1]} ${data}`);
        return this.conn.query('call auditTrailInsert(?,?,?,?)', [
          auditTrailTypeID,
          this.userInfoID > 0 ? this.userInfoID : null,
          null, //H:skillID	#HARDCODE
          data
        ], (err, rsets) => {
          if (err) {
            return this.logError("auditTrailInsert", err);
          }
        });
      }
    },
    beg: {
      enumerable: true,
      value: function() {
        var bWroteBar, k, len, o;
        if (this.userInfoID > 0) {
          this.bPage = true;
          this.w(beg);
          this.w(top);
          bWroteBar = false;
// if pins.length
          for (k = 0, len = pins.length; k < len; k++) {
            o = pins[k];
            if (!bWroteBar) {
              bWroteBar = true;
              this.w("<div class='pinbar'>");
            }
            this.log("o", o);
            this.w(`<span class='pin'><a style='background-color: #888; color: #fff;' href='/indent/${o.skillID}/${o.depth}'>${(o.tag ? o.tag : o.skillID)}${(o.depth === 100 ? "" : `/${o.depth}`)}</a> <a style='background-color:#aaa; font-size:80%' href='/pinun/${o.skillID}/${o.depth}'>x</a></span>`);
          }
          if (bWroteBar) {
            this.w("</div>");
            this.br();
            this.br();
          }
          // can't do asynchronous here without doing a callback or promise on each beg() for asynchronous
          //console.log "@content=#{@content}"
          //@conn.query 'call userGetIdentity()', (err, rsets) ->
          //	if err
          //		c.ex err
          //	else
          //		console.dir rsets
          //		recentsBuild c, rsets
          if (this.content) {
            this.w(this.content);
          }
          if (flash) {
            this.h1(flash);
          }
          // @res.write "<br><i>click (skillID) that follows a skill to add a child</i><br><br>"
          return this.userInfoID; // truthy (authenticated)
        } else {
          this.audit(3, `IP=${req.headers['x-forwarded-for'] || req.connection.remoteAddress} UA=${this.req.get("User-Agent")}`);
          this.w("503 Server Error"); // intentionally confuse the end user
          this.res.end();
          return 0; // falsy (not authenticated)
        }
      }
    },
    bOpen: {
      enumerable: true,
      value: false,
      writable: true
    },
    bPage: {
      enumerable: true,
      value: false,
      writable: true
    },
    conn: {
      enumerable: true,
      get: function() {
        if (this._conn) {
          if (!this.bOpen) {
            this._conn = sql.Fsql();
          }
          return this._conn;
        } else {
          this.bOpen = true;
          return this._conn = sql.Fsql();
        }
      }
    },
    emailSend: {
      enumerable: true,
      value: function(to, subject, html) {
        var transporter;
        if (throttle(0, `${to}:${subject}`)) {
          transporter = nodemailer.createTransport({
            host: "premium31.web-hosting.com",
            port: 465,
            secure: true,
            auth: {
              user: "peter@skillsplanet.com",
              pass: "0728Mail"
            }
          });
          return transporter.sendMail({
            from: '"Skills Planet" <peter@skillsplanet.com>', //H: better account
            to: to,
            subject: subject,
            html: html
          }, (err, info) => {
            if (err) {
              return this.logError("emailSend", err);
            } else {
              return this.log(`Message ${info.messageId} sent: ${info.response}`);
            }
          });
        }
      }
    },
    skillMap: {
      enumerable: true,
      value: null,
      writable: true
    },
    br: {
      value: function() {
        return this.w("<br>");
      }
    },
    childMap: {
      enumerable: true,
      value: null,
      writable: true
    },
    content: {
      enumerable: true,
      value: '',
      writable: true
    },
    d: {
      enumerable: true,
      value: function() {
        var ref1;
        if (this._conn) {
          this._conn.end();
          this.bOpen = false;
        }
        if (this.bPage) {
          this.res.write(end);
        }
        return (ref1 = this.res) != null ? ref1.end() : void 0;
      }
    },
    logError: {
      enumerable: true,
      value: function(s, e) {
        var ex;
        try {
          console.log(`${this.logPre()} - ERROR - ${s} e=${e} stringify=${JSON.stringify(e)}`);
          if (PROD) {
            return this.textSend("+17048044786", `ERR: ${s}`);
          }
        } catch (error) {
          ex = error;
          return console.log(`(ERR)CATCH: ${ex}`);
        }
      }
    },
    logCatch: {
      enumerable: true,
      value: function(s) {
        var ex;
        try {
          return console.log(`${this.logPre()} - ERROR - ${s}`);
        } catch (error) {
          // NO! textSend
          ex = error;
          return console.log(`(ERRNOT)CATCH: ${ex}`);
        }
      }
    },
    ex: {
      enumerable: true,
      value: function(err, title, o) {
        console.log(`${this.logPre()} - EXCEPTION ${title}`);
        console.dir(err);
        if (o) {
          console.dir(o);
        }
        if (PROD) {
          this.audit(6, `${title}: ${JSON.stringify(err)}`);
          this.textSend("+17048044786", `EX: ${title} ${err}`);
          this.log("afer textSend");
        }
        if (this.bPage) {
          this.res.write("EXCEPTION!");
          if (typeof myVar === 'string') {
            this.res.write(err);
          } else {
            this.res.write(JSON.stringify(err));
          }
        }
        return this.d();
      }
    },
    log: {
      enumerable: true,
      value: function(s, o) {
        var objPart;
        objPart = "";
        if (o) {
          objPart = ` o=${o} stringify=${JSON.stringify(o)}`;
        }
        return console.log(`${this.logPre()} - ${s}${objPart}`);
      }
    },
    logPre: {
      enumerable: true,
      value: function(s) {
        var userPart;
        date = new Date();
        userPart = this.userInfoID ? ` - UID=${this.userInfoID}` : "";
        return `logPre ${NN(date.getMinutes())}:${NN(date.getSeconds())} -> ${BUILD}${userPart}`;
      }
    },
    nameFirst: {
      enumerable: true,
      value: nameFirst, // hit or miss
      writable: true
    },
    pin: {
      enumerable: true,
      value: function(skillID, depth, tag) {
        var myDate;
        myDate = new Date();
        myDate.setFullYear(myDate.getFullYear() + 5);
        pins.push({
          skillID: skillID,
          depth: depth,
          tag: tag
        });
        this.log("PINNED", pins);
        flash = `pin: ${tag}`;
        return this.res.cookie('pinned', JSON.stringify(pins), {
          expire: myDate
        });
      }
    },
    pinun: {
      enumerable: true,
      value: function(skillID, depth) {
        var myDate;
        // msg = "pin not found in cookies"
        pins = pins.filter((o) => {
          // @log "COMP: #{o.skillID} vs. #{skillID} (#{typeof o.skillID}) vs (#{typeof skillID})"
          // @log "COMP: #{o.skillID} vs. #{skillID} (#{typeof o.skillID}) vs (#{typeof skillID})"
          if (o.skillID === skillID && o.depth === depth) {
            flash = `unpinned: ${o.tag}/${o.depth}`;
            return false;
          } else {
            return true;
          }
        });
        myDate = new Date();
        myDate.setFullYear(myDate.getFullYear() + 5);
        return this.res.cookie('pinned', JSON.stringify(pins), {
          expire: myDate
        });
      }
    },
    recentSkillIDMap: {
      enumerable: true,
      value: Object.create(null),
      writable: true
    },
    req: {
      enumerable: true,
      value: req
    },
    res: {
      enumerable: true,
      value: res
    },
    send: {
      enumerable: true,
      value: function(v) {
        // @log "send: TYPE: #{typeof v}"
        if (typeof v === "object") {
          return this.res.write(JSON.stringify(v));
        } else {
          return this.res.write(v);
        }
      }
    },
    textSend: {
      enumerable: true,
      value: function(to, body) {
        var client;
        this.log(`textSend ${to}`);
        if (throttle(1, `${to}:${body}`)) {
          this.log("okay xxx");
          client = new twilio("AC1c756bb1848dea85e2db9c6e9b3ecb47", "ab7dd3f8f602406661d18e1cc4131036");
          this.log("okay xxx2");
          //client.messages.create(
          //	body: 'Hello, Dave, from SkillsPlanet.com!'	#'I love you and want to hold you in bed every morning!'	#Hello from SkillsPlanet'
          //	to: '+16302345545'	#+17042934893'	#to: '+17048044786'
          //	from: '+17049466359'
          return client.messages.create({
            body: body,
            to: to,
            from: '+17049466359'
          }).then((message) => {
            return this.log(`twilio: sid=${message.sid}`);
          }).catch((ex) => {
            return this.logCatch(`twilio catch: ${ex //NOT: logCatch !!!
}`);
          });
        }
      }
    },
    userInfoID: {
      enumerable: true,
      value: userInfoID,
      writable: true
    },
    w: {
      enumerable: true,
      value: function(s) {
        return this.res.write(s);
      }
    },
    wbr: {
      enumerable: true,
      value: function(s) {
        return this.res.write(`${s}<br>`);
      }
    },
    
    h1: {
      value: function(s) {
        if (s) {
          return this.w(`<h1>${s}</h1><br>`);
        }
      }
    },
    t: {
      value: function(arb) {
        return this.w(`<table${(arb ? ` ${arb}` : "")}>`);
      }
    },
    st: {
      value: function() {
        return this.w("</table>");
      }
    },
    tr: {
      value: function(arb) {
        return this.w(`<tr${(arb ? ` ${arb}` : "")}>`);
      }
    },
    str: {
      value: function() {
        return this.w("</tr>");
      }
    },
    td: {
      value: function(s, arb) {
        if (s) {
          return this.w(`<td${(arb ? ` ${arb}` : "")}>${s}</t>`);
        } else {
          return this.w(`<td${(arb ? ` ${arb}` : "")}>`);
        }
      }
    },
    std: {
      value: function() {
        return this.w("</td>");
      }
    },
    hid: {
      value: function(name) {
        var ref1;
        return this.w(`<input name='${name}' type='hidden' value='${(ref1 = this.req.params[name]) != null ? ref1 : this.req.body[name]}'>`);
      }
    }
  });
};

app.get('/', function(req, res) {
  return res.send('Hello Michelle!!!');
});

/*
POST /skills Email= Password=
POST /append UserID= SkillID=
POST /delete UserID= SkillID=
POST /search UserID= Term=
*/
app.post('/emailHold', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "emailHold");
  return c.conn.query('call emailHold(?)', [req.body.email], function(err, rsets) {
    if (err) {
      return c.ex(err, `emailHold: ${req.body.email}`);
    } else {
      c.log(`emailHold: ${req.body.email} => ${rsets[0][0].emailHoldID}`);
      c.send({
        emailHoldID: 1 * rsets[0][0].emailHoldID
      });
      return c.d();
    }
  });
});

app.post('/userUpdate', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "userUpdate");
  c.log("userUpdate: PRE", req.body);
  //c.log "v2=#{emailHoldID}"
  //c.log "t2=#{typeof emailHoldID}"
  return c.conn.query('call userUpdate(?,?,?,?,?)', [req.body.nameFirst, req.body.nameLast, req.body.emailHoldID, req.body.password, req.body.userInfoID], function(err, rsets) {
    if (err) {
      return c.ex(err, "userUpdate", req.body);
    } else {
      c.send(rsets[0][0]);
      c.log(`userUpdate: ${JSON.stringify(req.body)} =>`, rsets[0][0]);
      return c.d();
    }
  });
});

app.post('/userLogIn', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "userLogIn");
  return c.conn.query("call userLogIn(?,?)", [req.body.email, req.body.password], function(err, rsets) {
    var ro;
    if (err) {
      c.send({
        userInfoID: 0
      });
      return c.ex(err);
    } else {
      if (rsets[0].info.numRows > 0) {
        ro = {
          userInfoID: 1 * rsets[0][0].userInfoID,
          nameFirst: rsets[0][0].nameFirst,
          nameLast: rsets[0][0].nameLast,
          email: rsets[0][0].email,
          BUILD: BUILD
        };
      } else {
        ro = {
          userInfoID: 0
        };
      }
      c.log(`userLogIn: ${req.body.email} / ${req.body.password} =>`, ro);
      c.send(ro);
      return c.d();
    }
  });
});

// http://skillsplanet.com:3344/skillSearch/basic
app.get('/skillSearch/:term', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "skillSearch");
  return c.conn.query("call skillSearch(?)", [req.params.term], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.log(`skillSearch: ${req.params.term}`);
      c.send({
        skillsList: rsets[0]
      });
      return c.d();
    }
  });
});

// http://skillsplanet.com:3344/emailSend
app.get('/emailSend', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "emailSend");
  c.write("sending test mail");
  c.emailSend("peter@skillsplanet.com", "hey there, good lucking!", "reply if you get this!");
  return c.d();
});

//# skillsplanet.com:3344/skillSelectAll
//app.get '/skillSelectAll', (req, res) ->
//	c = contextFactory req, res
//	c.log "skillSelectAll"
//	c.conn.query "call skillSelectAll", (err, rsets) ->
//		if err
//			c.ex err
//		else
//			c.send skillsList: rsets[0]
//			c.d()
app.post('/skillUserSelect', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "skillUserSelect");
  c.log("skillUserSelect");
  return c.conn.query("call SkillUserSelect(?)", [req.body.userInfoID], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send({
        userInfoID: req.body.userInfoID,
        skillsList: rsets[0]
      });
      return c.d();
    }
  });
});

// skillsplanet.com:3344/stuffSelect
app.get('/stuffSelect', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "stuffSelect");
  // c.log "stuffSelect"
  return c.conn.query("call stuffSelect()", function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send(rsets);
      return c.d();
    }
  });
});

app.post("/userPasswordSend", function(req, res) {
  var c, email, pinDDDD;
  c = contextFactory(req, res, 0, "userPasswordSend");
  pinDDDD = rnd(1000, 9999);
  email = req.body.email.trim();
  return c.conn.query("call userPasswordSend(?,?)", [email, pinDDDD], function(err, rsets) {
    var ref, rs;
    if (err) {
      return c.ex(err);
    } else {
      if ((rsets != null ? (ref = rsets.info) != null ? ref.numRows : void 0 : void 0) === '0') {
        c.send({
          mCode: 1,
          msg: "account not found"
        });
        c.log(`userPasswordSend ${email}: account not found`);
      } else {
        rs = rsets[0][0];
        c.emailSend(email, "SkillsPlanet Temporary Password", `${rs.nameFirst}, here is your temporary password: <strong>${pinDDDD}</strong> that is valid for <i>two</i> hours.`);
        c.send({
          mCode: 0,
          msg: "password has been sent"
        });
        c.log(`userPasswordSend: ${pinDDDD} to ${email}`);
      }
      return c.d();
    }
  });
});

app.post('/userRegister', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "userRegister");
  c.textSend("+17048044786", `${req.body.userInfo.nameFirst} ${req.body.userInfo.nameLast} registered!`);
  c.textSend("+17042934893", `${req.body.userInfo.nameFirst} ${req.body.userInfo.nameLast} registered!`);
  return c.conn.query("call userRegister(?,?,?,?)", [req.body.userInfo.nameFirst, req.body.userInfo.nameLast, req.body.userInfo.emailHoldID, req.body.userInfo.password], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send({
        userInfoID: 1 * rsets[0][0].userInfoID
      });
      c.userInfoID = 1 * rsets[0][0].userInfoID;
      c.log(`userRegister: ${JSON.stringify(req.body.userInfo)} =>`, rsets[0][0]);
      return c.d();
    }
  });
});

app.post('/userSkillAdd', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "userSkillAdd");
  return c.conn.query("call userSkillAdd(?,?,?,?,?)", [req.body.userInfoID, req.body.skillID, req.body.facetID, req.body.aimID, req.body.skillLevelID], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send({
        userInfoID: req.body.userInfoID
      });
      c.log(`userSkillAdd: skillID=${req.body.skillID} skillLevelID=${req.body.skillLevelID}`);
      return c.d();
    }
  });
});

app.post('/userSkillRemove', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "userSkillRemove");
  return c.conn.query("call userSkillRemove(?,?)", [req.body.userInfoID, req.body.skillID], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send({
        msg: "success"
      });
      c.log(`userSkillRemove: skillID=${req.body.skillID}`);
      return c.d();
    }
  });
});

// http://skillsplanet.com:3344/usersSelectSkillID/13
app.get('/usersSelectSkillID/:skillID', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "userSelectSkillID");
  return c.conn.query("call usersSelectSkillID(?)", [req.params.skillID], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send(rsets[0]);
      c.log(`usersSelectSkillID: ${req.params.skillID}`);
      return c.d();
    }
  });
});

// http://skillsplanet.com:3344/msgSelect/1/5
app.get('/msgSelect/:userInfoFromID/:userInfoToID', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "msgSelect");
  return c.conn.query("call msgSelect(?,?)", [req.params.userInfoFromID, req.params.userInfoToID], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send(rsets[0]);
      c.log(`msgSelect: ${req.params.userInfoFromID} ${req.params.userInfoToID}`);
      return c.d();
    }
  });
});

// http://skillsplanet.com:3344/msgInbox/1
app.get('/msgInbox/:userInfoID', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "msgInbox");
  return c.conn.query("call msgInbox(?)", [req.params.userInfoID], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send(rsets[0]);
      c.log(`msgInbox: ${req.params.userInfoID}`);
      return c.d();
    }
  });
});

down = function(c) {
  var _, bodyList;
  // c.log "down", c.req.body
  if (!(bodyList = qqq[_ = c.req.body.userInfoFromID])) {
    bodyList = qqq[_] = [];
  }
  c.send(bodyList);
  // c.log "q_pop: bodyList.len=#{bodyList.length}"
  //H: guarantee of delivery???
  qqq[_].length = 0;
  return c.d();
};

app.post('/q_start', function(req, res) { //USED?
  var c, name1;
  c = contextFactory(req, res, 0, "q_start");
  c.log("q_start", req.body);
  (qqq[name1 = req.body.userInfoToID] != null ? qqq[name1] : qqq[name1] = []).push(req.body);
  return down(c);
});

app.post('/q_push', function(req, res) {
  var c, name1;
  c = contextFactory(req, res, 0, "q_push");
  c.log("q_push", req.body);
  (qqq[name1 = req.body.userInfoToID] != null ? qqq[name1] : qqq[name1] = []).push(req.body);
  return down(c);
});

app.post('/q_pop', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "q_pop");
  return down(c);
});

// RUN SERGEANT
// skillsplanet.com:3344/rs_barkSelect
app.get('/rs_barkSelect', function(req, res) {
  var c;
  c = contextFactory(req, res, 0, "rs_barkSelect");
  return c.conn.query("call rs_barkSelect()", function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      c.send(rsets);
      return c.d();
    }
  });
});

beg = `<html>\n	<head>\n		<!-- <link href='http://skillsplanet.com' rel='stylesheet' type="text/css"> -->\n		<style>\n			/* http://meyerweb.com/eric/tools/css/reset/\n			   v2.0 | 20110126\n			   License: none (public domain)\n			*/\n\n			html, body, div, span, applet, object, iframe,\n			h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n			a, abbr, acronym, address, big, cite, code,\n			del, dfn, em, img, ins, kbd, q, s, samp,\n			small, strike, strong, sub, sup, tt, var,\n			b, u, i, center,\n			dl, dt, dd, ol, ul, li,\n			fieldset, form, label, legend,\n			table, caption, tbody, tfoot, thead, tr, th, td,\n			article, aside, canvas, details, embed,\n			figure, figcaption, footer, header, hgroup,\n			menu, nav, output, ruby, section, summary,\n			time, mark, audio, video {\n				margin: 0;\n				padding: 0;\n				border: 0;\n				font-size: 100%;\n				font: inherit;\n				vertical-align: baseline;\n			}\n			/* HTML5 display-role reset for older browsers */\n			article, aside, details, figcaption, figure,\n			footer, header, hgroup, menu, nav, section {\n				display: block;\n			}\n			body {\n				line-height: 1;\n			}\n			ol, ul {\n				list-style: none;\n			}\n			blockquote, q {\n				quotes: none;\n			}\n			blockquote:before, blockquote:after,\n			q:before, q:after {\n				content: none;\n			}\n			table {\n				border-collapse: collapse;\n				border-spacing: 0;\n			}\n\n\n\n\n			body {\n				background-color: ${(PROD ? "#eef" : "pink")};\n				color: #000099;\n				font-family: sans-serif;\n			}\n\n			a:link, a:visited {\n				color: #004;\n				text-decoration: none;\n			}\n\n			a:active, a:hover {\n				color: #00F;\n				text-decoration: underline;\n			}\n\n			form {\n			   display: inline;\n			   margin: 0;\n			   padding: 0;\n			}\n\n			input {\n				border-radius: 2px;\n			}\n\n			.copyright {\n				font-size: 50%;\n			}\n\n			.filterForm___NOT_USED {\n				background-color: plum;\n				border-radius: 2px;\n				margin-left: 4px;\n				padding: 2px 8px; 8px; 8px;\n			}\n			.filterForm {\n				margin-left: auto;\n			}\n\n/*\n			.link-tips {\n				background-color: #ddd;\n				display: inline-block;\n				color: #666;\n			}\n*/\n\n			.flash {\n				background-color: green;\n				color: white;\n				font-size: 200%;\n			}\n\n			.bigfield {\n				font-size: 220%;\n			}\n\n			.biggerfield {\n				font-size: 120%;\n			}\n\n			.biggerfield2 {\n				font-size: 110%;\n			}\n\n			.bigtitle {\n				font-size: 175%;\n			}\n\n			.help {\n				background-color: #ddd;\n				border-radius: 6px;\n				color: #666;\n				display: inline-block;\n				padding: 8px 8px; 8px; 8px;\n			}\n\n			.help-field {\n				font-weight: bold;\n				padding-right: 2px;\n			}\n\n			.help-field-length {\n				color: #888;\n			}\n\n			.maintitle {\n				color: #fff;\n				display: inline-block;	/* DNW for vertical align middle */\n				vertical-align: bottom;	/* DNW for vertical align middle */\n			}\n\n			.mastbar {\n				background-color: #000;\n				display: flex;\n			}\n\n			.name {\n				color: #fff;\n			}\n\n			.null {\n				color: #ccc;\n				font-style: italic;\n			}\n\n			.skillID:link, .skillID:visited, .skillID:hover, .skillID:active {\n				color: #666;\n				font-size: 60%;\n				text-decoration: none;\n			}\n\n			table.dump tr td {\n				background-color: white;\n				border: 2px solid ${(PROD ? "#eef" : "pink")};\n			}\n\n			li {\n				padding-bottom: 1em;\n				/* border-bottom: 1px solid ${(PROD ? "#eef" : "pink")}; */\n			}\n\n			a.recent:link, a.recent:visited {\n				background-color:yellow;\n			}\n\n			a.visible0:link, a.visible0:visited, a.visible0:hover, a.visible0:active {\n				color: #666;\n			}\n\n			a.visible1:link, a.visible1:visited, a.visible1:hover, a.visible1:active {\n				color: #000;\n			}\n\n			span.mainmenu a:link, span.mainmenu a:visited {\n				background-color: #bbb;\n				border-radius: 2px;\n				color: #000;\n				padding: 0 2px;\n				text-decoration: none;\n			}\n\n			span.dbmenu a:link, span.dbmenu a:visited {\n				background-color: white;\n				border-radius: 2px;\n				color: #888;\n				padding: 0 2px;\n				text-decoration: none;\n			}\n\n			.skillTag {\n				background-color: orange;\n				border-radius: 7px;\n				color: #fff;\n				display: inline-block;\n				margin: 0 10px 0 20px;\n				padding: 0 4px;\n			}\n\n			.linkType {\n				border-radius: 7px;\n				color: #fff;\n				display: inline-block;\n				margin: 0 10px 0 20px;\n				padding: 0 4px;\n			}\n\n			.pinbar {\n				background-color: #ccc;\n				display: flex;\n			}\n\n			.pin {\n				background-color: #666;\n				border-radius: 2px;\n				margin-right: 1em;\n\n				color: pink;\n\n				a:link, a:visited {		//DNW//H\n					color: #fff;\n					text-decoration: none;\n				}\n\n				a:active, a:hover {\n					color: #f00;\n					text-decoration: none;\n				}\n			}\n\n\n			/* works but not flex\n			.main { display: flex; }\n			.a, .b, .c { background: #efefef; border: 1px solid #999; }\n			.b { flex: 1; text-align: center; }\n			.c { position: absolute; right: 0; } */\n\n			/*SO: 22429853\n			.main { display: flex; }\n			.a, .c { background: #efefef; border: 1px solid #999; }\n			.b { flex: 1; text-align: center; }\n			.c {margin-left: auto;}*/\n		</style>\n	</head>\n	<body>`;

end = `	<p></p>\n	<br>\n	<center class='copyright'>build ${BUILD} &copy SkillsPlanet.com</center>\n</body>\n</html>`;

N = function(s) {
  if (s === "null") {
    return "";
  } else if (s && s.length > 0) {
    return s;
  } else {
    return "";
  }
};

URL = function(s) {
  if (s === "null") {
    return "";
  } else if (s) {
    return `<a href='http://${s}'>${s}</a>`;
  } else {
    return "";
  }
};

// skillID, visible, tag, skill, description
plus = function(c, r) {
  // <a href='/surf/#{r.skillID}'>@</a>
  return `<a ${(0 && c.recentSkillIDMap[r.skillID] ? "class='recent'" : "")} class='visible${r.visible}' href='/skill/${r.skillID}' title='skill: ${N(r.skill)}'>${r.tag}</a><a href='/addform/${r.skillID}' title='description: ${N(r.description)}' class='skillID'>(${r.skillID})</a>`;
};

raw = function(req, res, filter, msg) {
  var c, filterUC;
  if (filter) {
    filterUC = filter.toUpperCase().trim();
  }
  if ((c = contextFactory(req, res, 1, "raw")).beg()) {
    c.log(`raw: term=${filter}`);
    c.h1(msg);
    return c.conn.query("call skillSelectAllEditor", function(err, rsets) {
      var bShow, k, len, post, pre, r, ref;
      if (err) {
        return c.ex(err);
      } else {
        c.w("<table class='dump'>");
        c.w("<tr><td>PID</td><td>skillID</td><td>hits</td><td>tag</td><td>skill</td><td>description</td><td>best URL</td><td>WikiPedia URL</td><td>our internal notes</td></tr>");
        ref = rsets[0];
        for (k = 0, len = ref.length; k < len; k++) {
          r = ref[k];
          pre = post = "";
          bShow = false;
          if (filter) {
            if (r.tag.toUpperCase().indexOf(filterUC) >= 0 || r.skillID === filterUC) {
              pre = "<span style='color:red;'>";
              post = "</span>";
              bShow = true;
            }
          } else {
            bShow = true;
          }
          if (bShow) {
            // <a href='/skill/#{r.skillID}'>#{pre + tag + post}</a>
            c.w(`<tr><td style='color: #888'>${r.parentID}</td><td style='font-weight: bold; background-color: #eee;'>${r.skillID}</td><td>${(r.CNT > 0 ? r.CNT : "")}</td><td>${plus(c, r)}</td><td>${N(r.skill)}</td><td>${N(r.description)}</td><td>${URL(r.bestURL)}</td><td>${URL(r.wikiPediaURL)}</td><td>${N(r.notes)}</td></tr>`);
          }
        }
        c.st();
        return c.d();
      }
    });
  }
};

//BAD-PATTERN: how pass callbacks?
skillSelectAllEditor = function(c, fail, succ) {
  c.log("skillSelectAllEditor");
  return c.conn.query("call skillSelectAllEditor", function(err, rsets) {
    var childMap, k, len, r, ref, skillMap;
    if (err) {
      return fail(err);
    } else {
      childMap = Object.create(null);
      skillMap = Object.create(null);
      ref = rsets[0];
      for (k = 0, len = ref.length; k < len; k++) {
        r = ref[k];
        if (!childMap[1 * r.parentID]) {
          childMap[1 * r.parentID] = [1 * r.skillID];
        } else {
          childMap[1 * r.parentID].push(1 * r.skillID);
        }
        skillMap[1 * r.skillID] = r;
      }
      // c.log "calling succ"
      c.skillMap = skillMap;
      c.childMap = childMap;
      return succ(skillMap, childMap);
    }
  });
};

h = function(req, res, filter, msg) {
  var c, filterUC;
  if ((c = contextFactory(req, res, 1, "h")).beg()) {
    if (filter) {
      filterUC = filter.toUpperCase();
    }
    c.h1(msg);
    return skillSelectAllEditor(c, (function(err) {
      return c.ex(err);
    }), function() {
      var childID, childList, childRS, k, len, ref, ref1, skillID, skillRS;
      c.w("<table border='0'>");
      ref = c.skillMap;
      for (skillID in ref) {
        skillRS = ref[skillID];
        if (((ref1 = (childList = c.childMap[skillID])) != null ? ref1.length : void 0) > 0) {
          c.w(`<tr><td>${plus(c, skillRS)}</td><td>`);
// c.log "LOOP: #{skillRS.skill}(#{skillRS.skillID}) childList.length=#{childList.length}", childList
          for (k = 0, len = childList.length; k < len; k++) {
            childID = childList[k];
            childRS = c.skillMap[childID];
            c.w(`${plus(c, childRS)} `);
          }
          c.w("</td></tr>");
        }
      }
      c.st();
      return c.d();
    });
  }
};

indent = function(c, req, res, filter, msg, skillID, depth) {
  var filterUC;
  // c.log "h: term=#{filter}"
  if (c.beg()) {
    if (filter) {
      filterUC = filter.toUpperCase();
    }
    c.h1(msg);
    return skillSelectAllEditor(c, (function(err) {
      return c.ex(err);
    }), function() {
      var drill;
      drill = function(level, parent) {
        var childID, childIDList, i, k, l, len, ref, results;
        if (level) {
          for (i = k = 1, ref = level; (1 <= ref ? k <= ref : k >= ref); i = 1 <= ref ? ++k : --k) {
            c.w("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
          }
        }
        // <span style='font-size:50%; color:#999;'>#{level}</span>
        c.w(`${plus(c, parent)}<br>`);
        if (level + 1 < depth) {
          if (childIDList = c.childMap[parent.skillID]) {
            // c.log "L#{level} #{parent.tag}: count=#{childIDList.length}<br>"
            childIDList.sort(function(a, b) {
              if (c.skillMap[a].tag < c.skillMap[b].tag) {
                return -1;
              } else {
                return 1;
              }
            });
            results = [];
            for (l = 0, len = childIDList.length; l < len; l++) {
              childID = childIDList[l];
              results.push(drill(level + 1, c.skillMap[childID]));
            }
            return results;
          }
        }
      };
      drill(0, c.skillMap[skillID]);
      return c.d();
    });
  }
};

form = function(c, parentID, r) {
  var bestURL, checkedPart, description, k, n, notes, parentIDPart, skill, skillID, tag, verbPhrase, wikiPediaURL;
  skillID = "";
  parentIDPart = parentID ? `value='${parentID}'` : "";
  // c.log "YOU: #{parentIDPart}"
  checkedPart = "checked=checked";
  tag = '';
  skill = '';
  description = '';
  bestURL = '';
  wikiPediaURL = '';
  notes = '';
  // c.log "form", r
  verbPhrase = r ? 'skill/' + r.skillID : 'add';
  if (r) {
    parentID = r.parentID;
    if (r.visible !== "1") {
      checkedPart = "";
    }
    parentIDPart = r ? `value='${r.parentID}'` : "";
    tag = r ? `value='${N(r.tag)}'` : "";
    skill = r ? `value='${N(r.skill)}'` : "";
    description = r ? N(r.description) : '';
    bestURL = r ? `value='${N(r.bestURL)}'` : "";
    wikiPediaURL = r ? `value='${N(r.wikiPediaURL)}'` : "";
    notes = r.notes !== null ? r.notes : '';
    c.w(`<br><span class='bigtitle'>Edit skillID ${r.skillID}</span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`);
    c.w("<form method='POST' action='/add'>");
    c.w(`<input name='parentID' type='hidden' value='${r.skillID}'>`);
    c.w("<input name='visible' type='hidden' value='on'>");
    c.w("<input name='tag' size='15' maxlength='48' type='text' placeholder='tag'>");
    c.w("<input name='skill' type='hidden' value=''>");
    c.w("<input name='description' type='hidden' value=''>");
    c.w("<input type='submit' value='INSTANT CHILD ADD'>");
    c.w("</form>");
    c.w("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pin w/depth: ");
    for (n = k = 1; k <= 9; n = ++k) {
      c.w(` <a href='/pin/${r.skillID}/${n}/${r.tag}'>${n}</a>`);
    }
    c.br();
  } else {
    c.w("<br>Add<br>");
  }
  c.w(`<form method='POST' action='/${verbPhrase}'>`);
  c.w(`<input name='parentID' tabindex='1' ${parentIDPart} size='5' type='text' placeholder='PID' ${(parentID ? "" : "autofocus='true'")}>(pid)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`);
  c.w(`<input name='visible' tabindex='2' type='CHECKBOX' ${checkedPart}> selectible by user`);
  c.br();
  c.w(`<input name='tag' tabindex='3' ${N(tag)} class='bigfield' size='32' maxlength='48' type='text' placeholder='tag (non-plural!)' required='true' ${(parentID ? "autofocus='true'" : "")}>`);
  c.br();
  c.w(`<input name='skill' tabindex='4' ${N(skill)} class='biggerfield' size='60' size='96' maxlength='64' type='text' placeholder='skill phrase (only if different from tag)'>`);
  c.br();
  c.w(`<textarea cols='60' tabindex='5' name='description' class='biggerfield2' maxlength='1024' placeholder='skill sentence (if different from above)'>${N(description)}</textarea><br>`);
  //c.w "<input name='bestURL' tabindex='6' #{N bestURL} placeholder='non-WikiPedia URL' size='64' maxlength='256' type='text'><br>"
  //c.w "<input name='wikiPediaURL' tabindex='7' #{N wikiPediaURL} placeholder='WikiPedia URL' size='64' maxlength='256' type='text'><br>"
  c.w(`<textarea cols='60' tabindex='8' rows='4' name='notes' maxlength='1024' placeholder='Internal company notes to each other'>${notes}</textarea>`);
  c.br();
  c.w(`<input type='submit' tabindex='9' value='${(r !== null ? "SUBMIT EDIT" : "SUBMIT ADD")}'>`);
  return c.w("</form>");
};

tipsWrite = function(c) {
  return c.w("<p></p>\n<p></p>\n<br>\n<br>\n<span class='help'>\n<strong>Tips</strong>\n<br>\n<br>\n<ul>\n<li><span class='help-field'>PID:</span># of parent node (container or skill) for this skill/container to live under.  The top-most node is 1.  <u>Pay attention not create a cyclical loop by setting the parent of a child to a sub-child.  If editing a node freezes, then you've done this: call Pete!</u></li>\n\n<li><span class='help-field'>checkbox:</span>uncheck if this is a 'container of skills' (added for hierarchical organization) instead of a real skill.  (e.g., \"Computer Languages\")</li>\n\n<li><span class='help-field'>tag:</span>Capitalized (unless normally uncapitalized [e.g., Unix command 'grep']), short as possible, SINGULAR (non-plural), even if a \"skill container.\"  Don't enter a job title (\"System Administration\" is better than \"System Administrator\").  <span class=\"help-field-length\">[48 chars]</span></li>\n\n<li><span class='help-field'>skill phrase:</span>if the tag is ambiguous (e.g., Java... programming language or coffee?), use a few words to more accurately describe the skill (e.g., \"Java Programming Language\").  <span class=\"help-field-length\">[96 chars]</span></li>\n\n<li><span class='help-field'>skill sentence:</span>English sentence to  disambiguate the skill so that the users have confirmation that what they are indeed choosing the skill they desire.   <span class=\"help-field-length\">[1024 chars]</span></li>\n\n<li><span class='help-field'>non-WikiPedia URL:</span>as far as you can tell the  best URL that describes the skill.   <span class=\"help-field-length\">[256 chars]</span></li>\n\n<li><span class='help-field'>WikiPedia URL:</span>the official WikiPedia URL.  <span class=\"help-field-length\">[256 chars]</span></li>\n\n<li><span class='help-field'>Internal notes:</span>anything that would help us manage this skill.  Questions you have to discuss later, etc.   <span class=\"help-field-length\">[1024 chars]</span></li>\n</ul>\n</span>");
};

app.get('/raw', function(req, res) {
  return raw(req, res, req.query.term, '');
});

pair = function(c, r, pre) {
  return `<a class='visible${r[`${pre}_visible`]}' href='/skill/${r[`${pre}_skillID`]}' title='skill: ${N(r[`${pre}_skill`])}'>${r[`${pre}_tag`]}</a><a href='/addform/${r[`${pre}_skillID`]}' title='description: ${N(r[`${pre}_description`])}' class='skillID'>(${r[`${pre}_skillID`]})</a>`;
};

app.get('/chk', function(req, res) {
  var c;
  if ((c = contextFactory(req, res, 1, "chk")).beg()) {
    c.h1("Integrity Check");
    return c.conn.query("call dupsSelect()", (err, rs) => {
      var k, len, r, ref;
      if (err) {
        return c.ex(err, "dupsSelect");
      } else {
        c.t("class='dump'");
        if (rs.length > 0) {
          c.tr();
          c.td("parent of 'A'");
          c.td("");
          c.td("duplicate 'A'");
          c.str();
          c.tr();
          c.td("parent of 'B'");
          c.td("");
          c.td("duplicate 'B'");
          c.str();
          c.tr();
          c.td("&nbsp;");
          c.td("&nbsp;");
          c.td("&nbsp;");
          c.str();
        }
        ref = rs[0];
        for (k = 0, len = ref.length; k < len; k++) {
          r = ref[k];
          c.tr();
          c.td(pair(c, r, "p1"));
          c.td("/");
          c.td(pair(c, r, "s1"));
          c.str();
          c.tr();
          c.td(pair(c, r, "p2"));
          c.td("/");
          c.td(pair(c, r, "s2"));
          c.str();
          c.tr();
          c.td("&nbsp;");
          c.td("&nbsp;");
          c.td("&nbsp;");
          c.str();
        }
        c.st();
        return c.d();
      }
    });
  }
});

app.get('/h', function(req, res) {
  return h(req, res, req.query.term, '');
});

app.get('/indent/:skillID?/:depth?', function(req, res) {
  var c, ref, ref1;
  c = contextFactory(req, res, 1, "indent");
  return indent(c, req, res, req.query.term, '', (ref = req.params.skillID) != null ? ref : 1, (ref1 = req.params.depth) != null ? ref1 : 100);
});

app.get('/pin/:skillID/:depth?/:tag?', function(req, res) {
  var c, ref, ref1, ref2, ref3;
  c = contextFactory(req, res, 1, "indent");
  c.pin((ref = c.req.params.skillID) != null ? ref : 1, (ref1 = c.req.params.depth) != null ? ref1 : 100, c.req.params.tag);
  return indent(c, req, res, "", '', (ref2 = req.params.skillID) != null ? ref2 : 1, (ref3 = req.params.depth) != null ? ref3 : 100);
});

app.get('/pinun/:skillID/:depth?', function(req, res) {
  var c;
  c = contextFactory(req, res, 1, "pinun");
  c.pinun(c.req.params.skillID, c.req.params.depth);
  if (c.beg()) {
    return c.d();
  }
});

app.get('/cms/:password?', function(req, res) {
  var bCookieWritten, c, myDate, nameFirst, userInfoID;
  bCookieWritten = false;
  userInfoID = 0;
  switch (req.params.password) {
    case "Peter":
      userInfoID = 1;
      nameFirst = "Peter";
      break;
    case "Michelle":
      userInfoID = 2;
      nameFirst = "Michelle";
      break;
    case "Dave":
      userInfoID = 3;
      nameFirst = "Dave";
      break;
    case "Steve":
      userInfoID = 4;
      nameFirst = "Steve";
      break;
    case "Bryan":
      userInfoID = 5;
      nameFirst = "Bryan";
      break;
    case "Paul":
      userInfoID = 8;
      nameFirst = "Paul";
  }
  c = contextFactory(req, res, 1, "cms", userInfoID, nameFirst);
  if (c.userInfoID > 0) {
    myDate = new Date();
    myDate.setFullYear(myDate.getFullYear() + 5);
    res.cookie('userInfoID', c.userInfoID, {
      expire: myDate
    });
    res.cookie('nameFirst', c.nameFirst, {
      expire: myDate
    });
    bCookieWritten = true;
    c.audit(2, "AUTHENTICATED!");
  }
  if (c.beg()) {
    if (bCookieWritten) {
      c.h1("YOU HAVE BEEN AUTHENTICATED!  Giving you some cookies!");
    }
    // #{if PROD then "/cms" else "/dev"}
    c.w(`Welcome ${c.nameFirst}!`);
    return c.d();
  }
});

app.get('/logoff', function(req, res) {
  var c;
  res.clearCookie("userInfoID");
  res.clearCookie("nameFirst");
  res.clearCookie("UserInfoID");
  res.clearCookie("CMSAuthenticated");
  res.clearCookie("pinned");
  c = contextFactory(req, res, 1, "logoff");
  c.beg();
  c.log("logoff");
  c.h1("CMS cookies deleted");
  return c.d();
});

skillTags = function(c, skillID, rs) {
  var k, len, r;
  for (k = 0, len = rs.length; k < len; k++) {
    r = rs[k];
    c.w(`<span class='skillTag'>${r.skillTagArea}: ${r.skillTag}</span>`);
  }
  return c.w(`<span class='mainmenu'><a href='/addtag/${skillID}'>ADD TAG</a></span>`);
};

//parent = (c, r) ->
//	c.t()	#R
//	c.tr()
//	c.td()
//	if r
//		#skillSelectAllEditor c, ((err) -> c.ex err), ->
//		#pathWrite c, r.skillID
//		c.w "parent: "
//		c.w "#{plus c, r}"
//	c.std()
//	c.str()
//	c.st()
app.get('/skill/:skillID', function(req, res) {
  var c;
  c = contextFactory(req, res, 1, "skill");
  return after(c, req.params.skillID, null);
});

after = function(c, skillID, msg) {
  skillID = 1 * skillID;
  c.log(`after: skillID=${skillID}`);
  if (c.beg()) {
    return c.conn.query('call skillSelectEditor(?)', [skillID], function(err, rs) {
      var b, k, l, len, len1, len2, len3, len4, len5, m, p, par, q, r, ref, ref1, ref2, ref3, ref4, ref5, t;
      if (err) {
        return c.ex(err);
      } else {
        par = rs[1][0];
        // c.log "after", rs[0][0]
        // c.log "after", rs[1][0]
        if (msg) {
          c.w(`<div class='flash'>${msg}</div><br><br>`);
        }
        c.t();
        if (par) {
          c.tr();
          c.td(null, "bgcolor='#9e9' colspan='2'");
          ref = rs[0].slice(0).reverse();
          for (k = 0, len = ref.length; k < len; k++) {
            r = ref[k];
            // c.w "#{r.skillID} #{skillID}"
            // c.log "WHUT", r
            if (1 * r.skillID !== 1 * skillID) { // and 1 * r.skillID isnt 1 * par.skillID
              c.w(`${plus(c, r)}`);
              c.w(" / ");
            }
          }
          c.std;
          c.str();
        }
        //					c.tr()
        //					c.td null, "bgcolor=#dfd colspan='2'"
        //					# c.w "parent:"
        //					c.br()
        //					c.br()
        //					c.w "#{plus c, par}"
        //					if r.skill
        //						c.w "&nbsp;&nbsp;&nbsp;&nbsp;(#{par.skill})"
        //					if r.description
        //						c.w "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>#{par.description}</strong>"
        //					c.br()
        //					c.std()
        //					c.str()
        c.tr();
        c.td(null, "bgcolor=#ccf");
        form(c, null, rs[2][0]);
        skillTags(c, skillID, rs[7]);
        c.br();
        c.br();
        //LINKS
        c.t();
        c.tr();
        c.td(null, "bgcolor='yellow' colspan='2'");
        c.w("Website Page Links");
        c.br();
        c.t("class='dump'");
        ref1 = rs[8];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          r = ref1[l];
          c.tr();
          // c.td r.linkID
          c.td(linkType(r));
          c.td(r.caption);
          c.td(`<a href='http://${r.url}' target='_blank'>${r.url}</a>`);
          c.str();
        }
        c.st();
        c.w(`<span class='mainmenu'><a href='/addlink/${skillID}'>ADD LINK</a></span>`);
        
        c.std;
        c.str();
        c.st();
        c.std();
        c.td(null, "bgcolor=#ddf");
        if (par) {
          c.w(`<span class='mainmenu'><a href='/addform/${par.skillID}'>ADD SIBLING</a></span>`);
        }
        ref2 = rs[3];
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          r = ref2[m];
          c.br();
          c.w(`${plus(c, r)}`);
          if (1 * r.skillID === 1 * skillID) {
            c.w(" ME");
          }
        }
        c.std();
        c.str();
        c.tr();
        c.td(null, "bgcolor=#dfd colspan='2'");
        c.br();
        c.w(`<span class='mainmenu'><a href='/addform/${skillID}'>ADD CHILD</a></span>`);
        ref3 = rs[4];
        for (p = 0, len3 = ref3.length; p < len3; p++) {
          r = ref3[p];
          c.br();
          c.w(`${plus(c, r)}`);
        }
        c.td();
        c.str();
        c.tr();
        c.td(null, "bgcolor='#9e9' colspan='2'");
        b = false;
        ref4 = rs[5];
        for (q = 0, len4 = ref4.length; q < len4; q++) {
          r = ref4[q];
          if (b) {
            c.w("<hr>");
          }
          b = true;
          c.w(r.trivia);
        }
        c.br();
        c.w(`<form method='POST' action='/trivia/${skillID}'>`);
        //c.w "<input type='hidden' name='skillID' value='#{skillID}}'>"
        c.w("<textarea cols='80' rows='5' name='trivia' maxlength='1024' placeholder='interesting trivia sentence'></textarea>");
        c.br();
        c.w("<input type='submit' value='SUBMIT NEW TRIVIA'>");
        c.w("</form>");
        c.std;
        c.str();
        //				c.tr()
        //				c.td null, "bgcolor='orange' colspan='2'"
        //				c.w "Website Page Links"
        //				c.br()
        //				c.t "class='dump'"
        //				for r in rs[8]
        //					c.tr()
        //					# c.td r.linkID
        //					c.td linkType r
        //					c.td r.caption
        //					c.td "<a href='http://#{r.url}' target='_blank'>#{r.url}</a>"
        //					c.str()
        //				c.st()
        //				c.w "<span class='mainmenu'><a href='/addlink/#{skillID}'>ADD LINK</a></span>"
        //				#
        //				c.std
        //				c.str()
        c.st();
        c.br();
        c.br();
        bulkForm(c, skillID);
        c.br();
        c.br();
        c.w("Modification History");
        c.br();
        c.br();
        c.t("class='dump'");
        ref5 = rs[6];
        for (t = 0, len5 = ref5.length; t < len5; t++) {
          r = ref5[t];
          c.tr();
          c.td(r.initials);
          c.td(r.inserted);
          c.td(r.skillTrailType);
          c.td(r.newValues);
          c.str();
        }
        c.st();
        // tipsWrite c
        return c.d();
      }
    });
  }
};

FN = function(s) {
  if (s === "null" || !s || s.length === 0) {
    return null;
  } else {
    return s;
  }
};

FNon = function(s) {
  if (s === "on") {
    return 1;
  } else {
    return 0;
  }
};

stripHTTP = function(s) {
  s = (s != null ? s : "").trim();
  if (s.startsWith("http://")) {
    s = s.slice(7);
  } else if (s.startsWith("https://")) {
    s = s.slice(8);
  }
  return s.trim();
};

recentsWrite = function(c, fail, succ) {
  return c.conn.query('call skillRecentSelect', function(err, rsets) {
    if (err) {
      c.ex(err);
      return failure();
    } else {
      recentsBuild(c, rsets);
      c.w(c.content);
      return succ();
    }
  });
};

recentsBuild = function(c, rsets) {
  var k, len, r, ref, s;
  s = "<br>";
  ref = rsets[1];
  for (k = 0, len = ref.length; k < len; k++) {
    r = ref[k];
    c.recentSkillIDMap[r.skillID] = r; //not complete skill record
    s += `${plus(c, r)}(${r.nameFirst} ${r.skillTrailType}) `;
  }
  // c.log "c.content=#{c.content}"
  s += "<br>\n<br>\n<div class='help'>\n<strong>Tips</strong>\n<br>\n<br>\n<a class='visible1' href='/skill/1' title='CLICK TO EDIT'>tagName</a><a href='/addform/1' title='CLICK ME TO ADD CHILD' class='skillID'>(123)</a>\n<br>\nclick on skill/container name to edit<br>\nclick on the trailing (id) to add child\n</div>\n</p>";
  return c.content = s;
};

// c.log "recentsBuild: s=#{c.content}"
app.post('/bulk', function(req, res) {
  var c, insertOne, inserts, k, len, lines, parentID, s;
  c = contextFactory(req, res, 1, "bulk");
  if (c.beg()) {
    c.w("Here's what I got:");
    c.br();
    lines = req.body.lines.split(/\r?\n/); //SO:21895354
    for (k = 0, len = lines.length; k < len; k++) {
      s = lines[k];
      s = s.trim();
      if (s.length) {
        if (+s === +s) {
          c.br();
          c.br();
          c.wbr(`PARENTID=${s}`);
        } else if (s.length > 0) {
          c.wbr(`=> ${s}`);
        }
      }
    }
    c.br();
    inserts = 0;
    parentID = 2;
    insertOne = function(j) {
      var tag;
      c.log(`insertOne: j=${j}`);
      if (j >= lines.length) {
        c.wbr(`ALL DONE: inserts completed=${inserts}`);
        return c.d();
      } else {
        s = lines[j].trim();
        if (s.length) {
          c.log(`insertOne: s=${s}`);
          if (+s === +s) {
            parentID = +s;
            c.log(`parentID=${parentID}`);
            return insertOne(j + 1);
          } else {
            tag = FN(s);
            if (tag.length > 48) {
              tag = tag.slice(0, 48);
              c.w(`TRUNCATED at 48 characters: ${tag}`);
            }
            c.log("calling");
            return c.conn.query('call skillInsert(?,?,?,?,?,?,?,?,?)', [c.userInfoID, FN(parentID), FNon("on"), tag, FN(""), FN(""), FN(""), FN(""), FN("")], function(err, rsets) {
              if (err) {
                c.wbr("EXCEPTION OCCURRED AT SOME POINT DURING BATCH ADD... not sure what inserted and what did not");
                return c.ex(err);
              } else {
                c.wbr("insert success!");
                inserts++;
                return insertOne(j + 1);
              }
            });
          }
        } else {
          return insertOne(j + 1);
        }
      }
    };
    return insertOne(0);
  }
});

app.post('/add', function(req, res) {
  var c;
  if (FN(req.body.tag)) {
    c = contextFactory(req, res, 1, "add");
    return c.conn.query('call skillInsert(?,?,?,?,?,?,?,?,?)', [c.userInfoID, FN(req.body.parentID), FNon(req.body.visible), FN(req.body.tag), FN(req.body.skill), FN(req.body.description), FN(stripHTTP(req.body.bestURL)), FN(stripHTTP(req.body.wikiPediaURL)), FN(req.body.notes)], function(err, rsets) {
      if (err) {
        return c.ex(err);
      } else {
        // after c, rsets[0][0].skillID, "added skillID #{rsets[0][0].skillID}"
        return after(c, req.body.parentID, `added skillID ${rsets[0][0].skillID}`);
      }
    });
  } else {
    return res.redirect(`addform/${req.body.parentID}`);
  }
});

app.post('/skill/:skillID', function(req, res) {
  var c;
  c = contextFactory(req, res, 1, "skill");
  c.log("skillUpdate");
  if (+req.body.parentID === +req.params.skillID) {
    if (c.beg()) {
      c.w("Whoa!  DANGER: you set the parentID to your own skillID, which would create an infiniite loop.  Please hit back button and correct!");
      return c.d();
    }
  } else if (FN(req.body.tag) === "Root") {

  } else {
    //H: dangerous: can post without authentication!
    return c.conn.query('call skillUpdate(?,?,?,?,?,?,?,?,?,?)', [c.userInfoID, FN(req.body.parentID), FNon(req.body.visible), FN(req.body.tag), FN(req.body.skill), FN(req.body.description), FN(stripHTTP(req.body.bestURL)), FN(stripHTTP(req.body.wikiPediaURL)), FN(req.body.notes), FN(req.params.skillID)], function(err, rsets) { //H: where does this come from???
      if (err) {
        return c.ex(err);
      } else {
        // after c, req.params.skillID, "saved"
        return after(c, req.body.parentID, "saved");
      }
    });
  }
});

app.post('/trivia/:skillID', function(req, res) {
  var c;
  c = contextFactory(req, res, 1, "skill");
  c.log("trivia");
  return c.conn.query('call triviaInsert(?,?,?)', [c.userInfoID, FN(req.params.skillID), FN(req.body.trivia)], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      return after(c, req.params.skillID, "saved");
    }
  });
});

bulkForm = function(c, parentID) {
  c.t();
  c.tr();
  c.td();
  c.w("<br>Bulk Add<br>");
  c.w("<form method='POST' action='/bulk'>");
  c.w(`<textarea cols='80' rows='10' name='lines' placeholder='see example below'>${(parentID ? parentID : "")}</textarea>`);
  c.br();
  c.w("<input type='submit' value='SUBMIT BULK ADD'>");
  c.w("</form>");
  c.std();
  c.td();
  c.w("<p></p>\n<p></p>\n<br>\n<br>\n<span class='help'>\n<strong>Bulk Example</strong>\n<br>\n<br>\n2<br>\nunderwater basket weaving<br>\ncorn husking<br>\n<br>\n100<br>\nC++<br>\nJava<br>\n<br>\nIf no parentID is specified they are added to UNCLASSIFIED (parentID=2).\n</span>");
  c.std();
  c.str();
  return c.st();
};

app.get('/addform/:parentID?', function(req, res) {
  var c;
  if ((c = contextFactory(req, res, 1, "addform")).beg()) {
    // c.log "addform: pid=#{req.params.parentID}"
    //TEST c.ex {peter:"alvin"}, "some mssg"
    form(c, req.params.parentID, null);
    tipsWrite(c);
    c.br();
    c.br();
    bulkForm(c, req.params.parentID);
    return c.d();
  }
});

pathWrite = function(c, skillID) {
  var delim, r, s, sID;
  c.log(`buildPath ${skillID}`);
  sID = skillID;
  s = "";
  delim = "";
  while (sID > 0) {
    c.log(`loop: sID=${sID}`);
    r = c.skillMap[sID];
    if (r) {
      s = plus(c, r) + delim + s;
      sID = r.parentID;
    } else {
      c.log(`sID=${sID} null`);
      s = "SURF_ERROR";
      sID = 0;
    }
    delim = " / ";
  }
  return c.w(`<br><br>${s}<br><br>`);
};

app.get('/addtag/:skillID', function(req, res) {
  var c, query;
  if ((c = contextFactory(req, res, 1, "addtag")).beg()) {
    c.h1("Add Tag");
    return c.conn.query(query = "call skillTagSelectAllEditor()", (err, rsets) => {
      var k, len, r, ref;
      if (err) {
        return c.ex(err, query);
      } else {
        ref = rsets[0];
        for (k = 0, len = ref.length; k < len; k++) {
          r = ref[k];
          c.w(`<a href='/addtagsubmit/${req.params.skillID}/${r.skillTagID}'><span class='skillTag'>${r.skillTagArea}: ${r.skillTag}</span> ${r.phrase} // ${r.description}</a>`);
          c.br();
        }
        return c.d();
      }
    });
  }
});

app.get('/addtagsubmit/:skillID/:skillTagID', function(req, res) {
  var c;
  c = contextFactory(req, res, 1, "addtagsubmit");
  return c.conn.query("call skill2skillTagInsert(?,?,?)", [c.userInfoID, FN(req.params.skillID), FN(req.params.skillTagID)], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      return after(c, req.params.skillID, "skillTag added");
    }
  });
});

linkType = function(r) {
  return `<span style='background-color:${r.color}' class='linkType'>${r.linkType}</span>`;
};

app.get('/addlink/:skillID', function(req, res) {
  var c, query;
  if ((c = contextFactory(req, res, 1, "addlink")).beg()) {
    c.h1("Add Link");
    return c.conn.query(query = "call linkTypeSelectAllEditor()", (err, rsets) => {
      var k, len, r, ref;
      if (err) {
        return c.ex(err, query);
      } else {
        ref = rsets[0];
        for (k = 0, len = ref.length; k < len; k++) {
          r = ref[k];
          c.w(`<a href='/addlinksubmit/${req.params.skillID}/${r.linkTypeID}'>${linkType(r)}</a>`);
          c.br();
        }
        return c.d();
      }
    });
  }
});

app.get('/addlinksubmit/:skillID/:linkTypeID', function(req, res) {
  var c;
  if ((c = contextFactory(req, res, 1, "addlinksubmit")).beg()) {
    c.w("<br>Add Link<br>");
    c.w("<form method='POST' action='/addlinksubmit2'>");
    c.hid("skillID");
    c.hid("linkTypeID");
    c.w("<input name='url' size='256' type='text' placeholder='URL'>");
    c.br();
    c.w("<input type='submit' value='SUBMIT'>");
    c.w("</form>");
    return c.d();
  }
});

app.post('/addlinksubmit2', function(req, res) {
  var c;
  c = contextFactory(req, res, 1, "addlinksubmit2");
  return c.conn.query("call linkInsert(?,?,?,?)", [c.userInfoID, FN(req.body.skillID), FN(req.body.linkTypeID), FN(stripHTTP(req.body.url))], function(err, rsets) {
    if (err) {
      return c.ex(err);
    } else {
      return after(c, req.body.skillID, "link added");
    }
  });
});

//#########
hhh = function(req, res, tableName, orderBy) {
  var c, query;
  if ((c = contextFactory(req, res, 1, "hhh")).beg()) {
    c.h1(tableName);
    return c.conn.query(query = `select * from ${tableName} order by ${orderBy != null ? orderBy : `${tableName}ID DESC`}`, (err, rs) => {
      var cn, k, len, r;
      if (err) {
        return c.ex(err, query);
      } else {
        c.t("class='dump'");
        if (rs.length > 0) {
          c.tr();
          for (cn in rs[0]) {
            c.td(`<strong>${cn
          //DNW: bold
}</strong>`);
          }
          c.str();
        }
        for (k = 0, len = rs.length; k < len; k++) {
          r = rs[k];
          c.tr();
          for (cn in r) {
            c.td(`${(r[cn] === null ? "<span class='null'>null</span>" : r[cn] ? r[cn] : '&nbsp;')}`);
          }
          c.str();
        }
        c.st();
        return c.d();
      }
    });
  }
};

app.get('/a', function(req, res) {
  return hhh(req, res, "aim");
});

app.get('/at', function(req, res) {
  return hhh(req, res, "auditTrail");
});

app.get('/att', function(req, res) {
  return hhh(req, res, "auditTrailType");
});

app.get('/eh', function(req, res) {
  return hhh(req, res, "emailHold");
});

app.get('/f', function(req, res) {
  return hhh(req, res, "facet");
});

app.get('/r', function(req, res) {
  return hhh(req, res, "reward");
});

app.get('/rk', function(req, res) {
  return hhh(req, res, "rewardKey");
});

app.get('/rkt', function(req, res) {
  return hhh(req, res, "rewardKeyTrail");
});

app.get('/rt', function(req, res) {
  return hhh(req, res, "rewardTrail");
});

app.get('/s', function(req, res) {
  return hhh(req, res, "skill");
});

app.get('/sl', function(req, res) {
  return hhh(req, res, "skillLevel", "skillID ASC, skillLevelID DESC");
});

app.get('/st', function(req, res) {
  return hhh(req, res, "skillTrail");
});

app.get('/stag', function(req, res) {
  return hhh(req, res, "skillTag");
});

app.get('/staga', function(req, res) {
  return hhh(req, res, "skillTagArea");
});

app.get('/s2stag', function(req, res) {
  return hhh(req, res, "skill2skillTag", "skillID ASC, skillTagID DESC");
});

app.get('/stt', function(req, res) {
  return hhh(req, res, "skillTrailType");
});

app.get('/t', function(req, res) {
  return hhh(req, res, "trivia");
});

app.get('/ui', function(req, res) {
  return hhh(req, res, "userInfo");
});

app.get('/ui2p', function(req, res) {
  return hhh(req, res, "userInfo2password", "UI2PID DESC");
});

app.get('/ui2s', function(req, res) {
  return hhh(req, res, "userInfo2skill", "inserted DESC");
});

app.get('/us', function(req, res) {
  return hhh(req, res, "userState");
});

//#########

//app.get '/surf/:skillID?', (req, res) ->
//	skillID = req.params.skillID ? 1
//	c = contextFactory req, res
//	if c.beg()
//		c.conn.query 'call SkillRecentSelect', (err, rsets) ->
//			if err
//				c.ex err
//			else
//				# console.dir rsets
//				recentsBuild c, rsets
//				c.w c.content
//				skillSelectAllEditor c, ((err) -> c.ex err), ->
//					c.w "worked!"
//					surf c, skillID
//					c.d()

//app.listen PORT_CMS, ->
//	console.log "======================================================================"
//	console.log "SkillsPlanet API and CMS #{BUILD} running on port #{PORT_CMS}"
if (0) {
  //  ####################################
  //  ######### MOVED TO aws.js ##########
  //  ####################################

  // FILE UPLOAD
  //express = require('express')
  multer = require('multer');
  upload = multer({
    dest: 'uploads/'
  });
  // app = express()
  app.post('/upload', upload.single('avatar'), function(req, res, next) {
    lg("slash upload");
  });
  // req.file is the `avatar` file
  // req.body will hold the text fields, if there were any
  lg("END--near end of file");
  //app.post '/photos/upload', upload.array('photos', 12), (req, res, next) ->
  //	# req.files is array of `photos` files
  //	# req.body will contain the text fields, if there were any
  //	return
  //cpUpload = upload.fields([
  //	{
  //		name: 'avatar'
  //		maxCount: 1
  //	}
  //	{
  //		name: 'gallery'
  //		maxCount: 8
  //	}
  //])
  //app.post '/cool-profile', cpUpload, (req, res, next) ->
  //	# req.files is an object (String -> Array) where fieldname is the key, and the value is array of files
  //	#
  //	# e.g.
  //	#  req.files['avatar'][0] -> File
  //	#  req.files['gallery'] -> Array
  //	#
  //	# req.body will contain the text fields, if there were any
  app.get('/formtest', function(req, res) {
    var c;
    c = contextFactory(req, res, 1, "formtest");
    if (c.beg()) {
      c.w("<form method='POST' action='/upload'><input type='text' name='avatar' value='avatar'><input type='submit' value='POST'></form>");
      return c.d();
    }
  });
  app.get('/formtest3399', function(req, res) {
    var c;
    c = contextFactory(req, res, 1, "formtest3399");
    if (c.beg()) {
      c.w("<form method='POST' action='http://www.skillsplanet.com:3399/upload'><input type='text' name='avatar' value='avatar'><input type='submit' value='POST'></form>");
      return c.d();
    }
  });
  app.get('/gettest', function(req, res) {
    var c;
    c = contextFactory(req, res, 1, "gettest");
    c.log("gettest: params: ", req.params);
    return c.d();
  });
  app.post('/posttest', function(req, res) {
    var c;
    c = contextFactory(req, res, 1, "posttest");
    c.log("posttest: body: ", req.body);
    return c.d();
  });
  // https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html
  // Use local .env file for env vars when not deployed

  // https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html
  // Use local .env file for env vars when not deployed
  if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
  }
  aws = require('aws-sdk');
  multer = require('multer');
  multerS3 = require('multer-s3');
  //s3 = new aws.S3
  //	accessKeyId: process.env.AWS_ACCESS_KEY_ID
  //	secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
  //	region: 'us-east-1'
  //# console.log("s3: " + JSON.stringify(s3));
  //# Initialize multers3 with our s3 config and other options
  //# https://www.npmjs.com/package/multer-s3
  //upload = multer
  //	storage: multerS3
  //		s3: s3
  //		bucket: process.env.AWS_BUCKET
  //		acl: 'public-read'
  //		metadata: (req, file, cb) ->
  //			console.log 'metadata'
  //			cb null, fieldName: file.fieldname
  //		key: (req, file, cb) ->
  //			console.log 'key'
  //			cb null, Date.now().toString() + '.caf'

  // Expose the /upload endpoint
  app = require('express')();
  http = require('http').Server(app);
  nbr = 0;
  app.post('/upload', upload.single('avatar'), (req, res, next) => {
    var o, pn;
    console.log(`[${nbr++}] /upload triggered`);
    res.json(req.file);
    // console.log(`JSON: ${JSON.stringify(o)}`);
    o = req.file;
    for (pn in o) {
      console.log(`prop: ${pn}: ${o[pn]}`);
    }
    console.log("");
    // console.log(`files.length=${req.files.length}`);
    o = req.file.metadata;
    for (pn in o) {
      console.log(`metadata: ${pn}: ${o[pn]}`);
    }
    return console.log("");
  });
  port = 3399;
  http.listen(port, () => {
    return console.log(`Listening on port ${port}`);
  });
}

//lg "websocket listening"
//app.ws '/echo', (ws, req) ->
//	lg "SIGNS OF LIFE"
//	ws.on 'message', (msg) ->
//		ws.send msg
