// Generated by CoffeeScript 2.3.0
var trace;

trace = require('./trace');

// PROJECT AGNOSTIC!!!
module.exports = {
  //	ASCIIHEX: (n) ->
  //#if n <= -3 or n >= 18
  //#	throw n
  //		if n > 15
  //			C.A_I_TO_LC_ASCII_HEX[15]
  //		else if n < 0
  //			C.A_I_TO_LC_ASCII_HEX[0]
  //		else
  //			C.A_I_TO_LC_ASCII_HEX[Math.round n]
  CONSTRAIN: function(min, n, max) {
    return Math.max(min, Math.min(n, max));
  },
  GUIDNew: function() { // uuidv4
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  },
  PLURAL: function(n) {
    if (n === 0 || n >= 2) {
      return "s";
    } else {
      return "";
    }
  },
  ROUND: function(f, decCnt) {
    return Math.round(f * Math.pow(10, decCnt)) / Math.pow(10, decCnt); //SO: 16319855
  },
  
  // N.RND -> 0,1
  // N.RND x -> 0-x
  // N.RND x,y -> x-y
  RND: function(min = 1, max) {
    if (!max) {
      max = min;
      min = 0;
    }
    return Math.floor(Math.random() * (max - min + 1) + min);
  },
  SIGN: function(n) {
    if (isNaN(n)) {
      return NAN;
    } else if (n === 0) {
      return 0;
    } else if (n > 0) {
      return 1;
    } else {
      return -1;
    }
  },
  PERIOD: function(n) {
    var i, j, ref, s;
    if (n > 0) {
      s = "";
      for (j = i = 1, ref = n; (1 <= ref ? i <= ref : i >= ref); j = 1 <= ref ? ++i : --i) {
        s += ".";
      }
      return s;
    } else {
      R.AT(n === 0);
      return "";
    }
  },
  WORD: function(n) {
    if (n === null) {
      return "";
    } else if (n < 11) {
      return C.A_NUMBERS_ENGLISH[n];
    } else {
      return R.V.COMMAIZE(n);
    }
  },
  ZEROPAD: function(n, len) {
    return ("000000000" + n).slice(-len);
  }
};
