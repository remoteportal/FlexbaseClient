// Generated by CoffeeScript 2.3.0
var Base, FBClientNode, O, TestHub, trace, util;

Base = require('./Base');

FBClientNode = require('./FBClientNode');

O = require('./O');

trace = require('./trace');

util = require('./Util');

TestHub = class TestHub extends Base {
  constructor(c) {
    super("TestHub");
    this.c = c;
  }

  //		O.DUMP @c

  //RV: fbc.user
  clientFBCCreateUserRandomRegister() {
    return new Promise((resolve, reject) => {
      var fbc;
      fbc = new FBClientNode(this.c, this.c.directory);
      fbc.start(this.c.URL); //H: eliminate?
      return fbc.get(this.objectIDLookup(this.FLEXBASE_AUTH)).then((auth) => { //H: catch-22?  it's not local yet so how get???
        fbc.auth = auth;
        return userRandomRegister(auth);
      }).then((user) => {
        fbc.user = user;
        return resolve(fbc);
      }).catch((ex) => {
        return reject(ex);
      });
    });
  }

  clientFBCUserLogon(username, password) {
    return new Promise((resolve, reject) => {
      var fbc;
      fbc = new FBClientNode(this.c, this.c.directory);
      fbc.start(this.c.URL);
      return fbc.get(this.objectIDLookup(this.FLEXBASE_AUTH)).then((auth) => {
        fbc.auth = auth;
        return fbc.logon(username, password);
      }).then((user) => {
        fbc.user = user;
        return resolve(fbc);
      }).catch((ex) => {
        return reject(ex);
      });
    });
  }

  emailRandom() {
    return `test${util.random(1000, 9999)}@test.com`;
  }

  fnameRandom() {
    return util.randomPick("fname", "Peter,Deanna,Desirina,Morgan,Deanelle,Dustin,Lauren,Dean,Ashley,Derrick,Parker,Daebrionne");
  }

  lnameRandom() {
    return util.randomPick("lname", "Alvin,Boksovich,Pearce");
  }

  passwordRandom() {
    return util.random(1000, 9999);
  }

  resetSync() {
    return util.fs_directoryDeleteRecursive("/tmp/ut");
  }

  startClient(directory) {
    return new Promise((resolve, reject) => {
      //			@log "startClient: #{spaceName}"														if trace.TESTHUB or trace.CONSTRUCTORS
      this.c.PORT_WEB_SOCKET = this.c.PROD ? 3355 : 3366;
      if (this.c.CLOUD) {
        this.c.URL = `ws://www.skillsplanet.com:${this.c.PORT_WEB_SOCKET}`;
      } else {
        this.c.URL = `ws://localhost:${this.c.PORT_WEB_SOCKET}`;
      }
      //H #WRONG: the testHub.start should NOT create a client... I think
      this.client = new FBClientNode(this.c, directory);
      return resolve(this.client);
    });
  }

  tablesCreate() {
    var sql;
    return sql = "CREATE TABLE `object` (\n  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n  `dateInserted` timestamp NOT NULL DEFAULT current_timestamp(),\n  `dateUpdated` timestamp NOT NULL DEFAULT current_timestamp(),\n  `parentID` int(11) unsigned NOT NULL,\n  `ownerID` int(11) unsigned NOT NULL DEFAULT 1,\n  `isPublic` bit(1) NOT NULL DEFAULT b'0',\n  `data` text NOT NULL,\n  `name` varchar(50) NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `parentID__object_objectID` (`parentID`),\n  KEY `ownerID__userInfo_userInfoID` (`ownerID`)\n) ENGINE=InnoDB AUTO_INCREMENT=225 DEFAULT CHARSET=utf8 COMMENT='the object repository'";
  }

  URLGet() {
    return this.c.URL;
  }

  usernameRandom() {
    return util.randomPick("username", "remoteportal");
  }

  userRandomRegister(auth) {
    return auth.register(this.usernameRandom(), this.passwordRandom(), this.emailRandom(), this.fnameRandom, this.lnameRandom());
  }

};

module.exports = TestHub;
