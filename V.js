// Generated by CoffeeScript 2.3.0
/*
V - Value functions					*** PROJECT AGNOSTIC ***

WHAT: Node module

DESCRIPTION

FEATURES
-

NOTES
- "A primitive (primitive value, primitive data type) is data that is not an object and has no methods. In JavaScript, there are 6 primitive data types: string, number, boolean, null, undefined, symbol"

TODOs
- throw error if find new datatype

KNOWN BUGS:
-
*/
var DUMP, KV, PAIR, RE_ISOLATE_TYPE, TYPE, trace, typeMap;

trace = require('./trace');

// [object Function]
RE_ISOLATE_TYPE = /\[object ([^\]]*)\]/;


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
DUMP = function(v) {
  var ex, type;
  try {
    //		type = Object::toString.call v
    //		# [object Function]
    //		re = /\[object ([^\]]*)\]/
    //		match = re.exec type
    //		if match
    //			console.log "match=#{match[1]}"
    //		else
    //			console.error "V.DUMP: unable to isolate type from: \"#{type}\""
    //			process.exit 1
    if (v != null) {
      type = TYPE(v);
      //			console.log "V.DUMP: DEBUG: {v} ARRAY=#{Array.isArray v} TYPEOF=#{typeof v} TYPE=#{type} JSON=#{JSON.stringify v}"
      switch (type) {
        case "Boolean":
        case "boolean":
        case "Number":
        case "number":
          return v;
        case "function":
          return "FN";
        //					v
        case "Promise":
          //TODO: dump attributes
          return `${v} <Promise>`;
        case "String":
        case "string":
          if (v.length === 0) {
            return "\"\"";
          } else {
            return v;
          }
          break;
        case "Uint8Array":
          return `${v} <${type}> ${JSON.stringify(v)}`;
        default:
          return `${v} <${type}> UNKNOWN`;
      }
    } else {
      //			console.log "V.DUMP: DEBUG: {v} ARRAY=#{Array.isArray v} TYPEOF=#{typeof v} TYPE=#{type} JSON=#{JSON.stringify v}"
      //			"null or undefined"
      return "null"; //H #WARNING
    }
  } catch (error) {
    ex = error;
    return console.error(`V.DUMP exception: ${ex}`);
  }
};

KV = function(k, v) {
  return `${k} = ${v} <${TYPE(v)
//TODO: distinquish between primative and non-primative
}>`;
};

PAIR = function(v) {
  return `${v} <${TYPE(v)
//TODO: distinquish between primative and non-primative
}>`;
};

typeMap = {};

TYPE = function(v) {
  var _, match, type;
  if (_ = typeMap[v]) {
    return _;
  } else {
    type = Object.prototype.toString.call(v);
    match = RE_ISOLATE_TYPE.exec(type);
    if (match && match.length >= 2) {
      //		console.log "match=#{match[1]}"

      // primative vs. non-primative types
      if (typeof v === "object") {
        type = match[1];
      } else {
        type = typeof v;
      }
      return typeMap[v] = type;
    } else {
      console.error(`V.TYPE: Unable to isolate type substring from: "${type}"`);
      return process.exit(1); //TODO: call util.exit()
    }
  }
};

module.exports = {
  DUMP: DUMP,
  EQ: function(v1, v2) {
    return console.log(`COMP: ${v1} vs. ${v2} (${typeof v1}) vs (${typeof v2}) ${(v1 === v2 ? "YES-MATCH" : "NO-MATCH") //USED?
}`);
  },
  KV: KV,
  PAIR: PAIR,
  TYPE: TYPE
};
