// Generated by CoffeeScript 1.12.7

/*
___________.__                ___.                                     _____    __________  .___
\_   _____/|  |   ____ ___  __\_ |__ _____    ______ ____             /  _  \   \______   \ |   |
 |    __)  |  | _/ __ \\  \/  /| __ \\__  \  /  ___// __ \           /  /_\  \   |     ___/ |   |
 |     \   |  |_\  ___/ >    < | \_\ \/ __ \_\___ \\  ___/          /    |    \  |    |     |   |
 \___  /   |____/\___  >__/\_ \|___  (____  / ____ >\___ >          \____|__  /  |____|     |___|


Copyright (C) 2016 Flexbase corporation - All Rights Reserved

Web Service:            Flexbase DBaaS (DataBase as a Service)
Language Binding:       JavaScript

Does NOT provide ANY user interface properties, events or methods (see Kernel API for that)
	except (__theme, __renderDetailLevel, __renderImage, __renderTitle)

RESTful connection points
http://api.flexbase.com
http://sandbox.flexbase.com

Callbacks use NodeJS function call back convention with 'err' as first parameter.

HOW DO THAT?
    http://worldofgolfresort.com/amenities/


createProperty
    mirrorLocally: true








## Top-Level Objects ##

JS Class            Flexbase Class                          Description
==================  ======================================  ===========================================
Comment             sys.object.Comment                      single instance of comment on arbitrary object
CommentCollection   sys.object.CommentCollection            arbitrary number of comments about an object
ErrorCollection     sys.ErrorCollection                     exhaustive list of errors
Flexbase            sys.Flexbase                            creates a user
Object              sys.Object                              base class of all Flexbase objects
SearchCriteria      sys.object.SearchCriteria               name/value pairs
SearchResult        sys.object.SearchResult                 particular search result
SearchResultCollection sys.object.SearchResultCollection    ordered search results
User                sys.User                                manages all user's objects






Comment
    Properties:
	message:string                                          contains markup
	messageType                                             { TEXT, IMAGE, etc. }
    user:User



CommentCollection
    Properties:
	commentCollection:[Comment]
    completeness

    Methods:
    commentAdd(Comment, callback)                           comment on someone's object
	getNextTenComments(method)                              { CHRONOLOGICAL,POPULAR }



ErrorCollection                                             REF: www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html
	Properties:
    EEXIST                                                  entity already exists
    EIO                                                     I/O or network communication error
    ENOENT                                                  no such entity (objectID, etc.)
    EPERM                                                   operation not permitted
    ESUSPENDED                                              user is suspended



(multiple users can be instantiated for unit testing)
Flexbase
    Properties:
    userCollection[User]

    Methods:
    userAuthenticate(username:string, password:string, bSaveCredentials, callback(User))
    userAuthenticateSavedCredentials(callback(User))
    userAuthenticateDeleteCredentials()
    userReserve(username:string, userAgent:string, callback(User))            reserve username for 3 minutes (used by "new user" use case); accountStandingState=RESERVED
        (^^^ restricted from public API)




Object                                                      NOTE: inherited by all objects
    Properties:
    __cacheMode:sys.object.cacheMode                        allowed to cache locally or not?
    __commentCollection:sys.object.CommentCollection
    __conflictResolutionMode:sys.object.conflictResolutionMode {LATEST_WINS, OWNER_WINS}
    __conflictResolutionState:sys.object.conflictResolutionState<READ_ONLY> {CLEAN, CONFLICTED}
    __country:world.Country                                 global country for geolocation
    __dateCreated:date<READ_ONLY>                           creation date
    __dateModified:date<READ_ONLY>                          last modified date
    __deployMode:sys.object.deployMode                      {IMMEDIATE, ONE_HOUR, AT_LOGOFF, AT_MIDNIGHT}
    __dragState:HELP                            FlexPage    HELP
    __element:Element(DOM)                      FlexPage    underlying DOM Element
    __extends:sys.className                                 object inheritance
    __className:sys.className                               my class
    __copyright:sys.object.Copyright                        the granular copyright of this particular object
    __countUserBookmarked:int<READ_ONLY>                    how many users have bookmarked me
    __countUserClicked:int<READ_ONLY>                       how many times users have clicked on me
    __countUserFollowing:int<READ_ONLY>                     how many users are following me
    __countUserViews:int<READ_ONLY>                         how many users have viewed me on a page
    __encryptionMode:sys.object.EncryptionMode              {PLAIN_TEXT(public), SSL, etc. }
    __freshState:<sys.object.FreshState>                    {FS_CREATED_NO_OBJECTID, SAVING, SAVE_ERROR, SAVED_YES_OBJECTID, STALE}
    __id:DOMString                              FlexPage    underlying DOM id
    __isIrrevocable:bool                                    can owner revoke at any time or not?
    __isPublic:bool                                         write to HTTP server for general accessibility
    __linkObjectID:int<READ_ONLY>                           object I'm wrapping (linked to)
    __loadedState:sys.object.LoadedState<READ_ONLY>         {ONLY_OBJECTID, DOWNLOADING_LINKS, ONLY_LINKS, DOWNLOADING_FULL, FULL}
    __mount:str_or_array_of_strs_HELP                       always read as mount[0] or mount.length even if shortcut "~" without brackets
    __objectID:int<READ_ONLY>                               permanent object identifier
    __ownerID:sys.userID                                    owner (person or group) of this object
    __parentID:int                                          ancestor parent of this object
    __postalCode:sys.postalCode                             global postal code for geolocation search
    __purityAge:sys.object.PurityAge                        how old (13 to 21 years old) a user must be to view this object
    __renderDetailLevel:sys.object.renderDetailLevel        {TINY, SMALL, MEDIUM, LARGE, FULL}
    __renderImage:bool                                      render the image of the object, if applies
	__renderTitle:bool                                      render the title of the object, if applies
    __selectState:HELP                          FlexPage    HELP
    __spokenLanguage:sys.spokenLanguage                     e.g., English, French, etc.
    __stick:bool                                            stick to edge of screen instead of scrolling off
    __theme:sys.Theme                                       e.g., "high contrast", "Dr. Who", etc.
    __userTagList:sys.object.TagList                        this user's tags on this object
    __versionMode:sys.object.VersionMode                    {DISABLED, OWNERS_ONLY_ENABLED, EVERYONE_ENABLED}
    __versionNumber<READ_ONLY>                              e.g., 1, 2, 3, ...
    __worldPath                                             e.g., "/world/people/Tom_Hanks"
    __worldTagList:sys.object.TagList<READ_ONLY>            collective user base tags on this object

    Events: **HELP: MOVE to FlexPage.coffee
    ___onClipboardCopy(bInternal)				FlexPage
    ___onClipboardCut(bInternal)				FlexPage
	___onClipboardPaste(HELP:MIMETYPE)			FlexPage
    ___onLockState(bLocked, UOID-HELP)			FlexPage
    ___onStick                                  FlexPage    call ___stickProxyCreate()
    ___onUnStick                                FlexPage    HELP
    ___onUpdated(sys.object.Delta)                          updated, perhaps by another user

    Methods:
    ___animate(snabbtObject)
    ___childrenLoad(callback(object))                       download children objects (if any)
    ___clone(callback(object))                              object with new objectID
    ___commentsGet(callback(CommentCollection))             get user's comments about this object
    ___delete(bPermanent,callback)                          delete object
    ___follow(user, callback(sys.Link))                     AKA link object
    ___getNext(pnCollection, cnt)                           for large collections
    ___like(callback)                                       'like' an object
    ___permissionsGet(callback:ObjectPermissions)           e.g., read/write, etc.
    ___pop(pn) => v                                         pop from queue
    ___push(pn, v)                                          push onto queue
    ___publishToWorldRepository(path)                       petition to add to worldbase.io repository
    ___purityAgeVote(sys.object.PurityAge)                  give input for how old user must be to view this object
    ___redo(callback(object))                               undo the last undo
    ___render(bServer)                                      HELP
    ___report(sys.object.reportState, callback)             {CLEAN, ABUSIVE, COPYRIGHT_INFRINGEMENT, HATEFUL, etc.}
    ___save(callback)                                       store object on server
    ___stickProxyCreate                                     inside ___onStick(), call to create new DOM element to use instead of scrolled off element so that stuck element can be a different size region that then orignal region (to making panel smaller, larger, etc.)
    ___undo(callback(object, sys.object.Delta))             undo single revision
    ___versionGet(versionNumber:int)                        create snapshot object
    ___versionHistoryGet(callback(sys.object.RevisionHistory)) query for version history object
    ___versionRevert(versionNumber:int)                     revert to previous version



NOTE: if it's viewable then it's also: annotatable, tagable, SQL selectable
NOTE: some of these apply to property-level permissions, also
HELP: almost every one of these is moderateable via simple workflow approval/rejection process
HELP: should it be possible to create an object the creator can now longer control? (omit self?)
If object.__ownerID is THEM, then can do _anything_ with the object
    If not, these are exampled to see if user is on the list for desired action
public object MUST have _6_propertyRead=true to see
    AND _6_$pn null or in list
What value do you set for "public?"
ObjectPermissions
    Properties:                     OBJ___      PN___
P       cacheClient                 obj         pn          only users allowed to cache in their browser/on device
P       commentAdd                  obj                     add a comment like on Facebook and later edit your own
        commentEdit                 obj                     edit a comment by another user
        commentDelete               obj                     delete user comments
P       compose                     obj         pn          can build other objects from this object
P       export                      obj         pn          export via JSON, XML, CSV, etc.
P       linkChangeSkin              obj                     can a object that links this object skin anyway they want to?
P       linkToMe                    obj                     link to me ("Share")
        userLogonLogoffEvent        obj                     user object only
        methodAdd                   obj         n/a         ladybug scripting
        methodEdit                  obj         pn          ladybug scripting
        methodDelete                obj         pn          ladybug scripting
        permissionsGrantToUser      obj         ?           further permissions to another user
        permissionsRevokeFromUser   obj         ?
        propertyAdd                 obj         n/a
        propertyDelete              obj         pn
P       propertyRead                obj         pn
        propertyWrite               obj         pn
        publicMeta                  obj         ?           all public (P
P       queryREST:au                obj         pn          if disabled then can only retrieve using server-side agent
P       queryServerAgent:au         obj         pn          can a server-side agent retrieve this object
P       searchable                  obj         pn          show up in search results
        systemPropertyEdit          obj         pn          e.g., __parentID, __postalCode, etc.
P       tag                         obj                     world at large can add tags for classification and searching
^ "publicMeta"




SearchCriteria
    Properties:
    propertyNameString:propertyValueString
    ...



SearchResult:
    Properties:
	points:int
    objectID:int



SearchResultCollection
    resultsCollection:[SearchResult]


User
    Properties:
    accountStandingState:sys.accountStandingState           { RESERVED, ACTIVE, ACTIVE_PAID, SUSPENDED }
    isLoggedOn:bool
    syncState:sys.clientRepositorySyncState                 { OFFLINE, LOGGING_ON, ONLINE, SYNCHRONIZING }
    userNamesBlocked:[string]                               users this user has blocked

    Events:
    onObjectUpdated(object)                                 some object has been updated

    Methods:
    add(password:string, email:string)                      call after userReserve; accountStandingState=RESERVED->ACTIVE
    chat(username) -> ChatConversation  HELP
    deleteAccountNoUndo()
    follow(objectID, callback(sys.Link))                    AKA link object
    get(objectID, detail, bForce, cb) -> Object             detail{TL_OBJECTID, TL_LINKS, TL_FULL}
    logoff()                                                sign-off of system
    search(ownerID, SearchCriteria), callback(SearchResultCollection)) ownerID=0 for global object repository
	synchronizeAll()                                        re-download all objects
    userBlock(bBlock,username)                              utterly hide other user
    userChatMute(bMute,minutes:int)                         mute chat messages  HELP





## Examples ##

flexbase = new Flexbase(true)
flexbase.userAuthenticateSavedCredentials (err, user) ->
    log "Welcome back #{user.username}"



localStorage
autoLogonUserName=remoteportal
server=dev








## Facebook Social Network ##

FBFeed
FBFeedPost


"sys.FBFeed":
	__cn: "sys.Class"
	postCollection:
		__cn: "sys.Property"
		isArray: true
		arrayPN: "name"
		arrayCN: "sys.FBFeedPost"
        pnSort: "sys.FBFeedPost.dateCreated"    #H
        $perm$arrayPush: *      # anyone can post comment
"sys.FBFeedPost":
	__cn: "sys.Class"
	dateCreated:
		__cn: "sys.Property"
	item:
		__cn: "sys.Property"
		typeName: "sys.Object"          # anything
        _z_comment: "can be anything: string, recipe, etc."
	author:
		__cn: "sys.Property"
		typeName: "sys.User"











## TODO ##
HELP: can't easily distinguish between Flexbase classes and types
deprecated properties: warn on ___save() that property is deprecated



http://localhost:63342/Both/objects/370.json


J:\Cloud\Dropbox\Flexbase\Both>node server\serverwriter.js

http://localhost:63342/Both/static.htm

http://localhost:63342/Both/index.htm?u=remoteportal&server=dev
http://localhost:63342/Both/index.htm?u=dave&server=dev

http://localhost:63342/Both/index.htm?u=dave&server=live            FireFox


http://www.pulsebase.com?u=remoteportal
http://www.pulsebase.com?u=dave


http://html.flexbase.com:3344/object/1/81


http://www.pulsebase.com:3344/object/1/81

http://localhost:3344/objects/dump
http://localhost:3344/objects/81
http://localhost:3344/object/9/81
http://localhost:3344/object/370/81         who's online
 */


/* define function variable before block to avoid code being appended to closing part of JSDoc comment */


/**
 * Function to calculate cube of input
 * @param {number} Number to operate on
 * @return {number} Cube of input
 */

(function() {
  var DEV, ERR, FRAME_PUSH, FS, Flexbase, FlexbaseObject, LS, R, SERVER, User, _, callMap, callSNNext, cls, clsTarget, ex, face, handler, lc, ll, lm, log, logerr, netmodule, objectUpdate2CB, objectUpdateCB, target, types, user, x,
    slice = [].slice;

  if (_ = window.getURLParameter("server")) {
    localStorage.server = _;
  }

  SERVER = localStorage.server === "dev" ? "http://localhost:3344" : "http://www.pulsebase.com:3344";

  R = window.R;

  DEV = 1;

  netmodule = require("net");

  lm = require('./logModule');

  log = function() {
    var a, args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    a = Array.from(args);
    a.unshift("flexbase:");
    return lm.log.apply(this, a);
  };

  logerr = function() {
    var a, args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    a = Array.from(args);
    a.unshift("flexbase:");
    return lm.logerr.apply(this, a);
  };

  FRAME_PUSH = function(err, o, omerge) {
    var k, v;
    if (!err) {
      err = new lm.FlexException();
    }
    o.file = "Flexbase";
    if (omerge) {
      for (k in omerge) {
        v = omerge[k];
        o[k] = v;
      }
    }
    err.pushFrame(o);
    return err;
  };

  ERR = {
    ACCES: 13,
    EXIST: 17,
    IO: 5,
    NOENT: 2,
    PERM: 1,
    SUSPENDED: 1000
  };

  FS = {
    CREATED_NO_OBJECTID: 0,
    SAVING: 1,
    SAVE_ERROR: 2,
    SAVED_YES_OBJECTID: 3,
    STALE: 4
  };

  LS = {
    ONLY_OBJECTID: 0,
    DOWNLOADING_LINKS: 1,
    ONLY_LINKS: 2,
    DOWNLOADING_FULL: 3,
    FULL: 4
  };


  /*
  properties:
  inherited:
  inheritedCovered:
  permissions:
  objectMeta
  propertiesMeta
  collisions
  system
  objectID
  versionNumber
   */

  callSNNext = 0;

  callMap = new Map();

  objectUpdateCB = null;

  objectUpdate2CB = null;

  user = {
    p: {
      accept_language: ["fr", "en"],
      write_language: "fr"
    }
  };

  types = {
    "sys.languageString": {
      get: function(target, pn) {
        var i, lc, len, ref, v;
        ref = target.kernel.user.p.accept_language;
        for (i = 0, len = ref.length; i < len; i++) {
          lc = ref[i];
          if (v = target.p[pn + '$' + lc]) {
            return v;
          }
        }
        return target.p[pn];
      },
      set: function(target, pn, v) {
        if (_ = target.kernel.user.p.write_language) {
          return target.p[pn + '$' + _] = v;
        } else {
          return target.p[pn] = v;
        }
      }
    },
    "sys.email": {
      desc: "Internet electronic mail address",
      jsType: "string",
      re: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/
    }
  };

  clsTarget = {
    collisions: {
      none: true
    },
    p: {
      greeting: {
        __cn: "sys.Property",
        typeName: "sys.languageString"
      },
      email: {
        __cn: "sys.Property",
        typeName: "sys.email"
      }
    },
    pmeta: {
      pi: {
        bReadOnly: true
      }
    },
    flex: {
      __objectID: 123
    },
    kernel: {
      user: user,
      alang: ["fr"]
    }
  };

  target = {
    collisions: {
      none: true
    },
    p: {
      pi: 3.14159,
      greeting$en: "Hello",
      greeting$fr: "Bonjour"
    },
    pmeta: {
      pi: {
        bReadOnly: true
      }
    },
    flex: {
      __objectID: 123
    },
    kernel: {
      user: user
    }
  };

  handler = {
    get: function(target, pn, receiver) {
      var dollar, po, tn, ty;
      if ((dollar = pn.indexOf('$')) >= 0) {
        if (pn === '$') {
          return target.flex.__objectID;
        } else if (dollar === 0) {
          pn = pn.slice(1);
          return target.flex[pn];
        }
      } else {
        if (target.kernel.cls) {
          if (po = target.kernel.cls[pn]) {
            tn = po.typeName;
            ty = types[tn];
            if ("get" in ty) {
              return ty.get(target, pn);
            }
          }
        }
        return target.p[pn];
      }
    },
    set: function(target, pn, v, receiver) {
      var po, tn, ty;
      if (target.kernel.cls) {
        if (po = target.kernel.cls[pn]) {
          tn = po.typeName;
          ty = types[tn];
          if ("set" in ty) {
            return ty.set(target, pn, v);
          } else if ("re" in ty) {
            if (ty.re.test(v)) {
              target.p[pn] = v;
            } else {
              throw "type validation: pn=" + pn + ": attempted=" + v + ": re=" + ty.re;
            }
          }
        }
      }
      return target.p[pn] = v;
    }
  };

  if (1) {
    face = new Proxy(target, handler);
    target.kernel.cls = cls = new Proxy(clsTarget, handler);
    lc = function(pn) {
      return log(pn, cls[pn]);
    };
    ll = function(pn, expect) {
      var v;
      v = face[pn];
      if (v !== expect) {
        return logerr(pn + ": got=" + v + " expected=" + expect);
      }
    };
    ll("pi", 3.14159);
    ll("$", 123);
    ll("$__objectID", 123);
    face.alvin = 777;
    ll("alvin", 777);
    ll("greeting", "Bonjour");
    face.greeting = "Salut";
    ll("greeting", "Salut");
    face.email = "p@p.com";
    try {
      face.email = 3;
    } catch (error) {
      ex = error;
    }
    ll("email", "p@p.com");
  }

  x = eval("2 + 2");

  FlexbaseObject = Object.defineProperties({}, {
    "__freshState": {
      value: FS.CREATED_NO_OBJECTID,
      writable: true
    },
    "__id": {
      get: function() {
        return "" + (this.__cn === "sys.User" ? this.userName + " " : "") + (this.__objectID ? this.__objectID : "PRE-ID");
      }
    },
    "__id2": {
      get: function() {
        return "" + (this.__fromID ? this.__fromID + " -> " : "") + this.__id;
      }
    },
    "__id3": {
      get: function() {
        var freshStatePart;
        if (this.__freshState === FS.CREATED_NO_OBJECTID) {
          return "[FS_CREATED_NO_OBJECTID]";
        } else {
          if (this.__freshState === FS.SAVED_YES_OBJECTID) {
            freshStatePart = "";
          } else {
            freshStatePart = " FS=" + this.__freshState;
          }
          return "[" + this.__id2 + freshStatePart + "]";
        }
      }
    },
    "__loadedState": {
      value: LS.ONLY_OBJECTID,
      writable: true
    },
    "___assert": {
      value: function(b, message) {
        if (!b) {
          return this.___logerr("ASSERT: " + message);
        }
      }
    },
    "___childrenLoad": {
      value: function(cb) {
        log("___childrenLoad");
        return cb({
          message: "NOT-IMPL"
        });
      }
    },
    "___log": {
      value: function() {
        var arg, args, i, len, s;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        s = "";
        for (i = 0, len = args.length; i < len; i++) {
          arg = args[i];
          s += (typeof arg === "object" ? JSON.stringify(arg) : arg) + " ";
        }
        return log(this.___logMsgCreate(s));
      }
    },
    "___logerr": {
      value: function() {
        var arg, args, i, len, s;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        s = "";
        for (i = 0, len = args.length; i < len; i++) {
          arg = args[i];
          if (typeof arg === "object") {
            if ("stack" in arg) {
              arg.logerr();
            } else {
              console.dir(arg);
              s += JSON.stringify(arg) + " ";
            }
          } else {
            s += arg + " ";
          }
        }
        return logerr(this.___logMsgCreate(s));
      }
    },
    "___logMsgCreate": {
      value: function(s) {
        return this.__id3 + " " + (this.____lastMethod ? this.____lastMethod : "") + ": " + s;
      }
    },
    "___on": {
      value: function(eventName, cb) {
        return this._x_cb = cb;
      }
    },
    "___save": {
      value: function(cb) {
        var k, net, o, ref, v;
        this.____lastMethod = "___save";
        this.__freshState = FS.SAVING;
        net = new netmodule.Net();
        o = Object.create(null);
        ref = this;
        for (k in ref) {
          v = ref[k];
          if (k !== "__freshState" && k !== "____lastMethod" && k !== "__who") {
            o[k] = v;
          }
        }
        return net.post(SERVER + "/object/" + this.____owner.__objectID, o, (function(_this) {
          return function(err, JSONResponse) {
            var res;
            if (err) {
              _this.__freshState = FS.SAVE_ERROR;
              return typeof cb === "function" ? cb(FRAME_PUSH(err, {
                method: "___save"
              })) : void 0;
            } else {
              res = JSON.parse(JSONResponse);
              if (res[0]) {
                _this.__freshState = FS.SAVE_ERROR;
                return typeof cb === "function" ? cb(FRAME_PUSH(err, res[0], {
                  method: "___save"
                }), null) : void 0;
              } else {
                o = res[1];
                _this._____objectIDSet(o.__objectID);
                return typeof cb === "function" ? cb(null) : void 0;
              }
            }
          };
        })(this));
      }
    },
    "__who": {
      enumerable: true,
      value: "FlexbaseObject"
    },
    "_____objectIDSet": {
      value: function(__objectID) {
        Object.defineProperty(this, "__objectID", {
          enumerable: true,
          value: __objectID
        });
        return this.__freshState = FS.SAVED_YES_OBJECTID;
      }
    }
  });


  /**
   * Function to calculate cube of input
   * @param {number} Number to operate on
   * @return {number} Cube of input
   */

  Flexbase = function(bProduction, cbOnload) {
    var fbase, fileref, head;
    if (bProduction == null) {
      bProduction = true;
    }
    fbase = {};
    fileref = document.createElement("script");
    fileref.setAttribute("type", "text/javascript");
    fileref.setAttribute("src", SERVER + "/socket.io/socket.io.js");
    try {
      document.getElementsByTagName("head")[0].appendChild(fileref);
    } catch (error) {
      ex = error;
      console.log("CAUGHT");
      if (typeof cbOnload === "function") {
        cbOnload(FRAME_PUSH({
          method: "Flexbase",
          msg: "unable to download socket.io"
        }), null);
      }
    }
    head = document.getElementsByTagName("head")[0];
    head.addEventListener("load", ((function(_this) {
      return function(event) {
        var src;
        if (event.target.nodeName === "SCRIPT") {
          src = event.target.getAttribute("src");
          if (src.indexOf("socket.io") > 0) {
            return typeof cbOnload === "function" ? cbOnload(null, fbase) : void 0;
          }
        }
      };
    })(this)), true);
    fbase.userAuthenticate = function(userName, password, bSaveCredentials, cb) {
      user = new User(fbase);
      return user.authenticate(userName, password, bSaveCredentials, function(err, user) {
        return cb(err, user);
      });
    };
    fbase.userReserve = function(userName, userAgent, cb) {
      log("userReserve: " + userName + ", " + userAgent);
      this.socket.emit("user.reserve", {
        userName: userName,
        userAgent: userAgent
      });
      user = new User();
      user.accountStandingState = 666;
      return cb(user);
    };
    Object.defineProperty(fbase, "userAuthenticateDeleteCredentials", {
      value: function() {
        return localStorage.removeItem("autoLogonUserName");
      }
    });
    Object.defineProperty(fbase, "userAuthenticateSavedCredentials", {
      value: function(cb) {
        if (localStorage.autoLogonUserName) {
          return this.userAuthenticate(localStorage.autoLogonUserName, "PW-HELP", true, cb);
        }
      }
    });
    return fbase;
  };

  User = function(flexbase) {
    var _z_bSaveCredentials, _z_cb, _z_password, _z_userName, authenticate, bless, classGetByName, classMap, getInternal, getRecursive, linkUp, objectMap, objectValidate, user_objectID;
    _z_userName = _z_password = _z_bSaveCredentials = _z_cb = null;
    classMap = {};
    objectMap = {};
    user_objectID = null;
    user = Object.create(FlexbaseObject);
    user.authenticationCnt = 0;
    authenticate = function(userName, password, bSaveCredentials, cb) {
      var net;
      user.____lastMethod = "authenticate";
      net = new netmodule.Net();
      return net.post(SERVER + "/authenticate", {
        userName: userName,
        password: password
      }, (function(_this) {
        return function(err, JSONResponse) {
          var k, ref, res, v;
          if (err) {
            flexbase.userAuthenticateDeleteCredentials();
            return cb(FRAME_PUSH(err, {
              method: "authenticate"
            }), null);
          } else {
            res = JSON.parse(JSONResponse);
            if (res[0]) {
              user.___logerr("", res[0]);
              return cb(res[0], null);
            } else {
              if (user.authenticationCnt++ === 0) {
                ref = res[1];
                for (k in ref) {
                  v = ref[k];
                  Object.defineProperty(user, k, {
                    enumerable: true,
                    value: v
                  });
                }
                user._____objectIDSet((user_objectID = parseInt(res[1].__objectID, 10)));
                Object.defineProperty(user, "userName", {
                  enumerable: true,
                  value: userName
                });
              }
              if (bSaveCredentials) {
                localStorage.autoLogonUserName = userName;
              }
              user.socket.emit("login", userName);
              return user.socket.on('loginACK', function(pair) {
                if (pair[0]) {
                  return cb(pair[0], null);
                } else {
                  user.socket.on('disconnect', function() {
                    log("@@@@@@@@ disconnected");
                    if (0) {
                      return authenticate(_z_userName, _z_password, _z_bSaveCredentials, _z_cb);
                    }
                  });
                  return cb(null, user);
                }
              });
            }
          }
        };
      })(this));
    };
    getInternal = function(user, objectID, detail, bForce, bRecursive, cb, bIsPublic) {
      var json, net, o;
      if (arguments.length !== 6) {
        throw 0;
      }
      if (bRecursive) {
        throw 0;
        return;
      }
      if (!bForce) {
        if (o = objectMap[objectID]) {
          cb(null, o, false);
          return false;
        } else if (json = localStorage[objectID]) {
          try {
            o = JSON.parse(json);
          } catch (error) {
            ex = error;
            user.___logerr("get: objectID=" + objectID + ": unable to parse: " + json);
            return false;
          }
          cb(null, bless(o), false);
          return false;
        }
      }
      net = new netmodule.Net();
      if (bIsPublic) {
        net.get(SERVER + "/objects/" + objectID, (function(_this) {
          return function(err, JSONResponse) {
            var res;
            if (err) {
              return cb(FRAME_PUSH(err, {
                method: "get"
              }), null);
            } else {
              res = JSON.parse(JSONResponse);
              if (res[0]) {
                return cb(res[0], null);
              } else {
                _this.ls_seto("objectsFollowed", res[1]);
                return cb(null, res[1]);
              }
            }
          };
        })(this));
      }
      net.get(SERVER + "/object/" + objectID + "/" + user_objectID, function(err, JSONResponse) {
        var res;
        if (err) {
          user.___logerr("get callback error", err);
          return cb(FRAME_PUSH(err), null, true);
        } else {
          res = JSON.parse(JSONResponse);
          if (res[0]) {
            user.___logerr("WTF:HERE", res);
            res[0].WTF = "HERE";
            return cb(res[0], null, true);
          } else {
            return cb(null, bless(res[1]), true);
          }
        }
      });
      return true;
    };
    getRecursive = function(user, objectID, statsObj, cb) {
      var cnt, downloading, fn, rv;
      log("BEG: getRecursive");
      downloading = 0;
      cnt = 0;
      rv = null;
      fn = function(objectID) {
        var async;
        cnt++;
        async = getInternal(user, objectID, -1, false, false, function(err, o, async) {
          var k, v;
          if (async) {
            downloading--;
          }
          if (err) {
            user.___logerr("getRecursive: getInternal: downloading=" + downloading);
            downloading = -1000;
            return cb(err, null);
          } else {
            if (!rv) {
              rv = 0;
            }
            for (k in o) {
              v = o[k];
              if (typeof v === "object") {
                if ("____link" in v) {
                  fn(v.____link);
                }
              }
            }
            if (downloading === 0) {
              if (cnt === 1) {
                linkUp();
                return cb(null, rv);
              }
            }
          }
        });
        if (async) {
          downloading++;
          throw 0;
        }
        return cnt--;
      };
      return fn(objectID);
    };
    bless = function(oIN) {
      var k, o, odesc, proxy, v;
      localStorage[oIN.__objectID] = JSON.stringify(oIN);
      if (o = objectMap[oIN.__objectID]) {
        odesc = {
          added: [],
          modified: [],
          unmodified: [],
          removed: []
        };
        for (k in oIN) {
          v = oIN[k];
          if (k in o) {
            if (JSON.stringify(oIN[k]) === JSON.stringify(o[k])) {
              odesc.unmodified.push(k, o[k]);
            } else {
              log("MOD: " + k + ": old=" + o[k] + " new=" + oIN[k]);
              odesc.modified.push(k, [o[k], oIN[k]]);
            }
          } else {
            odesc.added.push(k, oIN[k]);
          }
          o[k] = v;
        }
        for (k in o) {
          v = o[k];
          if (!(k in oIN)) {
            odesc.removed.push(k, o[k]);
            delete o[k];
          }
        }
      } else {
        o = Object.create(FlexbaseObject);
        for (k in oIN) {
          v = oIN[k];
          o[k] = v;
        }
        o._____objectIDSet(o.__objectID);
        Object.defineProperties(o, {
          "____owner": {
            value: user
          }
        });
        objectMap[o.__objectID] = o;
      }
      proxy = o;
      if (typeof objectUpdate2CB === "function") {
        objectUpdate2CB(odesc, proxy);
      }
      if (proxy._x_cb) {
        proxy._x_cb(odesc, proxy);
      }
      return proxy;
    };
    classGetByName = function(className, cb) {
      if (_ = classMap[className]) {
        return cb(null, _);
      } else {
        return getInternal(user, className, -1, false, false, function(err, o) {
          if (err) {
            logerr("classGetByName", err);
            return cb(err, null);
          } else {
            log("classGetByName: __objectID=" + o.__objectID);
            classMap[className] = o;
            return cb(null, o);
          }
        });
      }
    };
    objectValidate = function(o, className, cb) {
      return classGetByName(className, function(err, cls) {
        var a, er, perm, pn, pno, v;
        if (err) {
          return cb({
            message: "can't find className \"" + className + "\""
          }, null);
        } else {
          a = null;
          perm = o;
          for (pn in cls) {
            pno = cls[pn];
            v = o[pn];
            er = function(vt, message) {
              if (!a) {
                a = [];
              }
              return a.push([className, pn, v, vt, message]);
            };
            if (typeof pno === "object") {
              if ("required" in pno && !(pn in o)) {
                er("required", "missing");
              }
              if ("typeName" in pno) {
                if (pno.typeName === "sys.string") {
                  if (typeof v !== "string") {
                    er("typeName", "got=" + (typeof v) + " expected=" + pno.typeName);
                  }
                } else {
                  user.___logerr("typeName=" + pno.typeName);
                }
              }
            }
          }
          if (a) {
            return cb(a);
          } else {
            return cb(null);
          }
        }
      });
    };
    linkUp = function() {
      var k, o, o2, objectID, v;
      log("linkUp");
      for (objectID in objectMap) {
        o = objectMap[objectID];
        for (k in o) {
          v = o[k];
          if (typeof v === "object" && "____link" in v) {
            if (_ = objectMap[v.____link]) {
              o[k] = _;
              o2 = o;
            } else {
              user.___logerr("LINK: " + v.____link + ": NO");
            }
          }
        }
      }
    };
    Object.defineProperties(user, {
      "authenticate": {
        value: function(userName, password, bSaveCredentials, cb) {
          _z_userName = userName;
          _z_password = password;
          _z_bSaveCredentials = bSaveCredentials;
          _z_cb = cb;
          return authenticate(_z_userName, _z_password, _z_bSaveCredentials, _z_cb);
        }
      },
      "createObject": {
        value: function(parentID, className, oPre, cb) {
          user.____lastMethod = "createObject";
          return objectValidate(oPre, className, function(err) {
            var k, o, v;
            if (err) {
              return cb(FRAME_PUSH(err, {
                method: "createObject"
              }), null);
            } else {
              o = Object.defineProperties(Object.create(FlexbaseObject), {
                "__cn": {
                  enumerable: true,
                  value: className
                },
                "____owner": {
                  value: user
                },
                "__parentID": {
                  enumerable: true,
                  value: parentID
                }
              });
              if (oPre) {
                for (k in oPre) {
                  v = oPre[k];
                  o[k] = oPre[k];
                }
              }
              return o.___save(function(err) {
                if (err) {
                  return cb(FRAME_PUSH(err, {
                    method: "createObject",
                    parentID: parentID,
                    className: className,
                    oPre: oPre
                  }), o);
                } else {
                  return cb(null, o);
                }
              });
            }
          });
        }
      },
      "flexbase": {
        value: flexbase
      },
      "follow": {
        value: function(objectID, bFollow) {}
      },
      "get": {
        value: function(objectID, detail, bForce, cb) {
          if (arguments.length !== 4) {
            throw 0;
          }
          user.____lastMethod = "get";
          return getInternal(user, objectID, detail, bForce, false, cb);
        }
      },
      "logoff": {
        value: function(cb) {
          var net;
          user.____lastMethod = "logoff";
          this.socket.close();
          net = new netmodule.Net();
          return net.post(SERVER + "/logoff", null, (function(_this) {
            return function(err) {
              if (err) {
                return cb(FRAME_PUSH(err, {
                  method: "logoff"
                }));
              } else {
                _this.___log("logged off");
                return cb(null);
              }
            };
          })(this));
        }
      },
      "ls_get": {
        value: function(k) {
          return localStorage[this.__objectID + k];
        }
      },
      "ls_geto": {
        value: function(k) {
          var v;
          if (v = this.ls_get(k)) {
            return JSON.parse(v);
          } else {
            return null;
          }
        }
      },
      "ls_set": {
        value: function(k, s) {
          return localStorage[this.__objectID + k] = s;
        }
      },
      "ls_seto": {
        value: function(k, o) {
          return this.ls_set(k, JSON.stringify(o));
        }
      },
      "objectsFollowedDownload": {
        value: function(cb) {
          var id;
          user.____lastMethod = "objectsFollowedDownload";
          if (this.queue = this.ls_geto("objectsFollowed")) {
            if ((id = this.queue.pop()) > 0) {
              return getInternal(user, id, null, true, function(err, o) {
                if (err) {
                  return cb(FRAME_PUSH(err, {
                    method: "objectsFollowedDownload"
                  }));
                } else {
                  return cb(null);
                }
              });
            }
          }
        }
      },
      "objectsFollowed": {
        value: function(cb) {
          var net;
          user.____lastMethod = "objectsFollowed";
          net = new netmodule.Net();
          return net.get(SERVER + "/objects/" + this.__objectID, (function(_this) {
            return function(err, JSONResponse) {
              var res;
              if (err) {
                return cb(FRAME_PUSH(err, {
                  method: "objectsFollowed"
                }));
              } else {
                res = JSON.parse(JSONResponse);
                if (res[0]) {
                  return cb(FRAME_PUSH(err, res[0], {
                    method: "objectsFollowed"
                  }), null);
                } else {
                  _this.ls_seto("objectsFollowed", res[1]);
                  return cb(null, res[1]);
                }
              }
            };
          })(this));
        }
      },
      "onUserCall": {
        value: function(_) {
          return this.userCallCB = _;
        }
      },
      "on": {
        value: function(eventName, cb) {
          switch (eventName) {
            case "objectUpdate":
              return objectUpdateCB = cb;
            case "objectUpdate2":
              return objectUpdate2CB = cb;
            default:
              return cb({
                message: "unknown eventName \"" + eventName + "\""
              }, null);
          }
        }
      },
      "onUserFire": {
        value: function(_) {
          return this.userFireCB = _;
        }
      },
      "serverCall": {
        value: function(packet, cb) {
          user.____lastMethod = "serverCall";
          packet.__callSN = callSNNext++;
          callMap.set(packet.__callSN, {
            date: Date.now(),
            cb: cb
          });
          return this.socket.emit("serverCall", packet);
        }
      },
      "socket": {
        value: window.io(SERVER)
      },
      "sync": {
        value: function(cb) {
          var statsObj;
          user.____lastMethod = "sync";
          statsObj = {
            ls: 0,
            memory: 0,
            APIsucc: 0,
            APIfail: 0
          };
          return getRecursive(user, 3, statsObj, function(err, o) {
            var k, ref, v;
            if (err) {
              return cb(FRAME_PUSH(err, res[0], {
                statsObj: statsObj
              }), null);
            } else {
              ref = objectMap[3];
              for (k in ref) {
                v = ref[k];
                if (typeof v === "object" && !classMap[k]) {
                  classMap[k] = v;
                }
              }
              return cb(null, statsObj);
            }
          });
        }
      },
      "userCall": {
        value: function(userTo_objectID, packet, cb) {
          user.____lastMethod = "userCall";
          packet.__callSN = callSNNext++;
          packet.__to = "to";
          callMap.set(packet.__callSN, {
            date: Date.now(),
            cb: cb
          });
          return this.userFire(userTo_objectID, packet);
        }
      },
      "userFire": {
        value: function(userTo_objectID, packet) {
          user.____lastMethod = "userFire";
          packet.__userTo_objectID = userTo_objectID;
          return this.socket.emit("userFire", packet);
        }
      }
    });
    user.socket.on("serverCallACK", function(pair) {
      if (_ = callMap.get(pair[1].__callSN)) {
        callMap["delete"](pair[1].__callSN);
        if (pair[0]) {
          return _.cb(pair[0], pair[1]);
        } else {
          return _.cb(null, pair[1]);
        }
      } else {
        return user.___logerr("__callSN=" + pair[1].__callSN);
      }
    });
    user.socket.on("userFireACK", function(pair) {
      var err, i, len, net, notify, odesc, packet, ref, ref1, results;
      if (pair[0]) {
        return user.___logerr("userFireACK:", pair[0]);
      } else {
        packet = pair[1];
        if (packet.__callSN != null) {
          switch (packet.__to) {
            case "to":
              if (user.userCallCB) {
                user.userCallCB(packet);
                packet.__to = "from";
                ref = [packet.__userFrom_objectID, packet.__userTo_objectID], packet.__userTo_objectID = ref[0], packet.__userFrom_objectID = ref[1];
                return user.socket.emit("userFire", packet);
              } else {
                return user.___logerr("userCall request received: @userCallCB not set");
              }
              break;
            case "from":
              if (_ = callMap.get(packet.__callSN)) {
                callMap["delete"](packet.__callSN);
                if (packet.__err) {
                  err = packet.__err;
                  delete packet.__err;
                  return _.cb(FRAME_PUSH(err, {
                    event: "userFireACK",
                    statsObj: statsObj
                  }), packet);
                } else {
                  return _.cb(null, packet);
                }
              } else {
                return user.___logerr("__callSN=" + packet.__callSN);
              }
              break;
            default:
              return user.___logerr("__to=" + packet.__to);
          }
        } else if (packet.cmd === "objectUpdate") {
          notify = function(err, o) {
            if (err) {
              throw err;
            } else {
              if (typeof objectUpdate2CB === "function") {
                objectUpdate2CB(err, o);
              }
              if (o._x_cb) {
                return o._x_cb(err, o);
              }
            }
          };
          ref1 = packet.list;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            odesc = ref1[i];
            if (typeof objectUpdateCB === "function") {
              objectUpdateCB(err, odesc);
            }
            net = new netmodule.Net();
            if (odesc.isPublic) {
              results.push(net.get("/Both/objects/" + odesc.objectID + ".json", function(err, JSONResponse) {
                if (err) {
                  return user.___logerr("get callback error", err);
                } else {
                  return notify(err, bless(JSON.parse(JSONResponse)));
                }
              }));
            } else {
              results.push(user.get(odesc.objectID, true, true, function(err, o) {
                return notify(err, o);
              }));
            }
          }
          return results;
        } else {
          if (user.userFireCB) {
            return user.userFireCB(packet);
          } else {
            return user.___logerr("userFireACK: @userFireCB not set");
          }
        }
      }
    });
    return user;
  };

  R.flexbase = {
    FS: FS,
    User: User,
    Flexbase: Flexbase
  };

}).call(this);

//# sourceMappingURL=Flexbase.js.map
