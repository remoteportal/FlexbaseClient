// Generated by CoffeeScript 2.3.0
/*
ClientSync - communication persistence

EXTENDS: blah

DESCRIPTION

FEATURES
-

NOTES

TODOs
-

KNOWN BUGS:
-
*/
var Base, Classes, Client, ClientSync, ClientSyncUT, N, O, Store, UT, WebSocket, _resolve, trace, util;

//if node
WebSocket = require('ws');

//A = require './A'
Base = require('./Base');

Client = require('./Client');

Classes = require('./Classes');

N = require('./N');

O = require('./O');

Store = require('./Store');

trace = require('./trace');

UT = require('./UT');

util = require('./Util');

//endif

//if ut
ClientSyncUT = class ClientSyncUT extends UT {
  run(testHub1) {
    this.testHub = testHub1;
    return this.s("HELP", function() {});
  }

};

//endif
_resolve = null;

ClientSync = class ClientSync extends Client {
  constructor(URL, directory) {
    super();
    this.URL = URL;
    this.directory = directory;
    if (trace.CONSTRUCTORS) {
      this.log(`ClientSync: directory=${this.directory}`);
    }
    //		throw new Error "XXX"
    this.sendMap = {};
    this.store = Store.factory(this.directory);
  }

  listen(bAlive) {
    this.bAlive = bAlive;
    if (trace.SOCKET_LISTEN) {
      this.log(`listen: bAlive=${this.bAlive}`);
    }
    if (this.bAlive) {
      //PATTERN: super returns promise
      return new Promise((resolve, reject) => {
        var pr;
        pr = super.listen(this.bAlive);
        return pr.then(() => {
          return this.store.init().then(() => {
            return resolve();
          }).catch((ex) => {
            this.logCatch("store.init", ex);
            return reject(ex);
          });
        });
      });
    } else {
      return super.listen(false);
    }
  }

  onReceive(DO) {
    var rec;
    //		@log "onReceive [DEFAULT]", DO

    //TODO: build @assert into Base class which will throw Error(...)
    if (DO.cmd !== "s-to-c") {
      this.logAssert(`DO.cmd: expecting='s-to-c' got=${DO.cmd}`, DO, true);
      return;
    }
    if (rec = this.sendMap[DO.GUID]) {
      //			@log "onReceive: found GUID in map", rec, true
      return rec.resolve(DO);
    } else {
      return this.logWarning("onReceive: GUID not found", DO);
    }
  }

  sendSync(o) {
    return new Promise((resolve, reject) => {
      var DO;
      DO = { // DO=Disk Object
        cmd: "c-to-s",
        GUID: N.GUIDNew(),
        o: o,
        resolve: resolve,
        reject: reject,
        tsCBeg: Date.now() //H
      };
      
      //			@log "sendSync", DO, true
      this.sendMap[DO.GUID] = DO;
      //				resolve()
      this.store.write(DO.GUID, DO).then(() => {}).catch((ex) => {
        this.logCatch("store.write", ex);
        return reject(ex);
      });
      if (this.ws) {
        return this.send(DO);
      } else {
        return this.logInfo("sendSynx: OFFLINE");
      }
    });
  }

  //if ut
  static s_ut(testHub) {
    return new ClientSyncUT().run(testHub);
  }

};

//endif
module.exports = ClientSync;
